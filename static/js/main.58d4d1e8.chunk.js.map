{"version":3,"sources":["logic/util.ts","logic/move_notation.ts","logic/moves.ts","logic/state.ts","logic/pieces.ts","BoardSquare.tsx","PromoteMenu.tsx","ChessBoard.tsx","LabelledTextbox.tsx","util.ts","SetupInfo.tsx","SetupMode.tsx","player.ts","PlayerSelector.tsx","GameInfo.tsx","PlayMode.tsx","theme.ts","ThemeSetup.tsx","App.tsx","debug.ts","index.tsx"],"names":["convertFileLetter","letter","toLowerCase","charCodeAt","convertRankLetter","Number","Pos","file","rank","this","isInteger","Error","newFile","newRank","add","String","fromCharCode","other","fileCompare","raw","Math","floor","PgnMoveLineGen","currMoveStr","totalMoveStr","token","tmpMoveStr","length","NORMAL_MOVE_REGEX","MoveNotation","matches","color","move","trim","CastleMoveNotation","parsedMove","exec","pieceLetter","piece","FROM_LETTER","get","fromFileLetter","fromFile","util","fromRankLetter","fromRank","captures","toFile","toRank","toPos","promoteLetter","promoteChoice","NormalMoveNotation","isKingSide","isCastle","checkSymbol","captureLetter","fromRankDigit","promoteStr","getPGNLetter","toString","state","currTurn","PAWN","isNormal","board","canBeCaptured","isEnPassant","isPromote","fromPos","compare","Move","toNotation","flipTurn","modify","newState","doChain","isHistory","moveHistory","setSize","moveIndex","halfMove","push","lastFen","toAbvFen","stateCount","threeFoldDetect","set","NormalMove","isOccupied","notation","moveNotation","isCapture","possibleMoves","moves","filter","x","invalid","doneMove","do","isCheckmate","isCheck","KING","isProtected","checks","isPinned","deltaFile","deltaRank","abs","pinnedAxis","getPinnedAxis","sign","pieces","immmutable","FirstPawn","getColor","enPassantPos","addRank","PAWN_RANK_DIR","EnPassant","passedPawn","assert","Promotion","Castle","myRook","ROOK","myKing","myRank","KING_RANK","withMutations","myColor","betweenRookKing","kingSideCastle","queenSideCastle","pos","badPos","some","Player","arg1","Board","mutable","toRaw","KNIGHT","BISHOP","QUEEN","rawValue","id","rawSet","newRaw","Uint8Array","axis","pinned","attacked","fun","acc","i","fromRaw","fn","State","white","black","historyBegin","resign","agreeDraw","STARTING_BOARD","getStartingBoard","immutable","size","gameOverStr","isGameOver","moveCount","fen","emptyRun","fenLetter","lastFenLst","toFen","split","pop","join","asMutable","enPassantPossible","OTHER_COLOR","PAWN_RANK","enPassantPiecePos","enPassPos","tmpState","leftDiag","addFile","leftPawnPinned","rightDiag","rightPawnPinned","clearFlags","protects","prot","setProtected","setPinned","pin","moveList","concat","isThreeFold","isDraw","Object","freeze","HistoryState","last","undefined","depth","nodes","perft","gameStartTime","eventName","siteName","round","whiteName","blackName","date","getFullYear","getMonth","getDate","exportState","endAltHistory","end","result","pgnTags","beginState","begin","getStartState","outputStr","tag","moveLineGen","addToken","done","lastState","back","forward","history","forwardState","AltHistoryState","altBranch","START_STATE","FEN_REGEX","stateFromFen","parsedFen","rawBoard","rawRow","char","asNum","currPlayer","includes","enPassantPlayer","ConstructorKey","Square","_key","canMoveOnto","EmptySquare","_other","moveLine","line","protectLine","targetPiece","applyCheckPinFlag","checkForKing","pinLine","setPinnedAxis","Piece","key","Pawn","PROMOTE_LIST","choice","myPos","forwardMove","forwardOccupied","addMove","firstMove","console","otherColor","Rook","map","reduce","val","forEach","Knight","deltaPos","newPos","Bishop","Queen","prototype","call","King","genColor","kingRank","pawnRank","pawnRankDir","fenConv","idOffset","ret","assign","fromLetter","WRITABLE_WHITE","WRITABLE_BLACK","WHITE","BLACK","FROM_FEN_ARRAY","FROM_FEN","EMPTY","getPieceImage","theme","name","getPieceName","alt","className","src","process","prefix","BoardSquare","props","highlight","checkHighlight","isBlack","highlighted","width","height","fill","fillOpacity","inCheck","moveIndicator","pieceImage","canMoveTo","r","cx","cy","stroke","strokeWidth","onClick","children","PromoteMenu","promotes","onPromote","ChessBoard","useState","promotePos","setPromotePos","highlightedPos","changeHighlight","setup","setupPiece","squares","drawPromotePos","makeMove","moveFilter","j","Boolean","findIndex","promote","promoteMenu","promoteList","LabelledTextBox","textboxProps","label","getStateFromQuery","rawState","URLSearchParams","location","search","e","changeMode","path","replace","newLoc","query","pathname","delete","SetupInfo","inputFen","setInputFen","fenImportError","setImportError","useHistory","useLocation","errorKey","errors","hasError","newError","condition","text","whiteKingCount","blackKingCount","backRankPawns","piecesToElement","selectedPiece","selectPiece","blackPieces","whitePieces","selectedFirstMove","enPassantFile","value","type","readOnly","onChange","event","target","targetMove","changeState","enPassantRank","checked","disabled","openTheme","SetupMode","setHighlightedPos","setSelectedPiece","setState","Human","promiseRes","Promise","resolve","MrRandom","timeoutID","random","window","setTimeout","clearTimeout","Stockfish","level","stockfishHandle","parseStockfishLine","bind","giveStateToStockfish","wasmSupported","WebAssembly","validate","of","Worker","addEventListener","postMessage","command","data","rawMove","toUpperCase","terminate","PlayerFactory","HumanFactory","RandomFactory","StockfishFactory","difficulty","rawDifficulty","PlayerSelector","difficultySlider","min","minDifficulty","max","maxDifficulty","newDiff","onPlayerChange","setDifficulty","newSel","GameInfo","checkmateText","whiteFactory","setWhiteFactory","blackFactory","setBlackFactory","drawReason","player","restart","build","switchMode","PlayMode","players","setPlayers","useEffect","defaultState","stateValid","player1","player2","tmp","then","makeMoveThen","close","getBoardClick","CLASSNAME_SUFFIX","ThemeManager","style","document","createElement","DEFAULT_THEME","test","boardSquare","whiteColor","blackColor","textContent","useTheme","defaultTheme","setTheme","head","append","remove","ThemeSetup","boardWidth","setBoardWidth","boardRef","useRef","onResize","measureBoardWidth","current","removeEventListener","boardThemes","BOARD_THEMES","pieceThemes","PIECE_THEMES","onCancel","offsetHeight","boardTheme","find","newTheme","pieceTheme","ref","App","_props","themeSetup","themeOpen","setThemeOpen","exact","from","to","YACHESS_DEBUG","output","nodeTotal","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.58d4d1e8.chunk.js","sourcesContent":["function convertFileLetter (letter: string) {\n  const charCode = letter.toLowerCase().charCodeAt(0)\n  return charCode - 'a'.charCodeAt(0)\n}\n\nfunction convertRankLetter (letter: string) {\n  return Number(letter) - 1\n}\n\nclass Pos {\n  file: number;\n  rank: number;\n\n  constructor (file: number, rank: number) {\n    this.file = file\n    this.rank = rank\n\n    if (!Number.isInteger(rank) || !Number.isInteger(file) || rank < 0 || rank > 7 || file < 0 || file > 7) {\n      throw new Error('Invalid board pos')\n    }\n    // Object.freeze(this)\n  }\n\n  // Returns null on out of bounds\n  add (file: number, rank: number) {\n    const newFile = this.file + file\n    const newRank = this.rank + rank\n    if (newFile < 0 || newFile > 7 || newRank < 0 || newRank > 7) {\n      return null\n    }\n    return new Pos(newFile, newRank)\n  }\n\n  addFile (file: number) {\n    return this.add(file, 0)\n  }\n\n  addRank (rank: number) {\n    return this.add(0, rank)\n  }\n\n  toRaw () {\n    return this.rank * 8 + this.file\n  }\n\n  static fromRaw (raw: number): Pos {\n    const rank = Math.floor(raw / 8)\n    const file = raw % 8\n    return new Pos(file, rank)\n  }\n\n  toString () {\n    const fileLetter = String.fromCharCode(this.file + 'a'.charCodeAt(0))\n    const rankLetter = String(this.rank + 1)\n    return fileLetter + rankLetter\n  }\n\n  compare (other: Pos) {\n    const fileCompare = this.file - other.file\n    if (fileCompare !== 0) {\n      return fileCompare\n    }\n    return this.rank - other.rank\n  }\n}\n\nclass PgnMoveLineGen {\n  currMoveStr: string;\n  totalMoveStr: string;\n\n  constructor () {\n    this.currMoveStr = ''\n    this.totalMoveStr = ''\n  }\n\n  addToken (token: string) {\n    if (this.currMoveStr === '') {\n      this.currMoveStr = token\n    } else {\n      const tmpMoveStr = this.currMoveStr + ' ' + token\n      if (tmpMoveStr.length > 80) {\n        this.totalMoveStr += '\\n' + this.currMoveStr\n        this.currMoveStr = token\n      } else {\n        this.currMoveStr = tmpMoveStr\n      }\n    }\n  }\n\n  done () {\n    return this.totalMoveStr + '\\n' + this.currMoveStr\n  }\n}\n\nexport {\n  convertFileLetter,\n  convertRankLetter,\n  Pos,\n  PgnMoveLineGen\n}\n","import * as util from './util'\nimport * as moves from './moves'\nimport * as pieces from './pieces'\n\nconst NORMAL_MOVE_REGEX = /^([KQRBN]?)([a-h]?)([1-8]?)(x?)([a-h])([1-8])(?:=?([QRBN]))?(?:\\+|#|)(?:\\?\\??|!!?|\\?!|!\\?|)$/\n\nabstract class MoveNotation {\n  protected constructor () {\n    if (typeof this.matches !== 'function') {\n      throw new Error('Matches function not defined')\n    }\n  }\n\n  static parseMove (color: pieces.Color, move: string) {\n    move = move.trim()\n    if (move === 'O-O' || move === '0-0') {\n      return new CastleMoveNotation(true)\n    }\n    if (move === 'O-O-O' || move === '0-0-0') {\n      return new CastleMoveNotation(false)\n    }\n    const parsedMove = NORMAL_MOVE_REGEX.exec(move)\n    if (!parsedMove) {\n      return null\n    }\n\n    const pieceLetter = parsedMove[1]\n    const piece = color.FROM_LETTER.get(pieceLetter)!\n    const fromFileLetter = parsedMove[2]\n    const fromFile = fromFileLetter ? util.convertFileLetter(fromFileLetter) : null\n    const fromRankLetter = parsedMove[3]\n    const fromRank = fromRankLetter ? util.convertRankLetter(fromRankLetter) : null\n    const captures = parsedMove[4] === 'x'\n    const toFile = util.convertFileLetter(parsedMove[5])\n    const toRank = util.convertRankLetter(parsedMove[6])\n    const toPos = new util.Pos(toFile, toRank)\n    const promoteLetter = parsedMove[7]\n    let promoteChoice = null\n    if (promoteLetter) {\n      promoteChoice = color.FROM_LETTER.get(promoteLetter)!\n    }\n    return new NormalMoveNotation(piece, captures, fromFile, fromRank, toPos, promoteChoice)\n  }\n\n  abstract matches (move: moves.Move): boolean\n}\n\nclass CastleMoveNotation extends MoveNotation {\n  isKingSide: boolean\n\n  constructor (isKingSide: boolean) {\n    super()\n    this.isKingSide = isKingSide\n  }\n\n  toString () {\n    if (this.isKingSide) {\n      return 'O-O'\n    } else {\n      return 'O-O-O'\n    }\n  }\n\n  matches (move: moves.Move): boolean {\n    return move.isCastle() && this.isKingSide === move.isKingSide\n  }\n}\n\nclass NormalMoveNotation extends MoveNotation {\n  piece: pieces.Piece\n  captures: boolean\n  fromFile: number | null\n  fromRank: number | null\n  toPos: util.Pos\n  promoteChoice: pieces.Piece | null\n  checkSymbol: string\n\n  constructor (piece: pieces.Piece, captures: boolean, fromFile: number | null, fromRank: number | null, toPos: util.Pos, promoteChoice: pieces.Piece | null) {\n    super()\n    this.piece = piece\n    this.captures = captures\n    this.fromFile = fromFile\n    this.fromRank = fromRank\n    this.toPos = toPos\n    this.promoteChoice = promoteChoice\n    this.checkSymbol = ''\n  }\n\n  toString () {\n    let captureLetter = ''\n    if (this.captures) {\n      captureLetter = 'x'\n    }\n    let fromFileLetter = ''\n    if (this.fromFile !== null) {\n      fromFileLetter = String.fromCharCode(this.fromFile + 'a'.charCodeAt(0))\n    }\n    let fromRankDigit = ''\n    if (this.fromRank !== null) {\n      fromRankDigit = String(this.fromRank + 1)\n    }\n    let promoteStr = ''\n    if (this.promoteChoice) {\n      promoteStr += '=' + this.promoteChoice.getPGNLetter()\n    }\n    return this.piece.getPGNLetter() + fromFileLetter + fromRankDigit + captureLetter + this.toPos.toString() + promoteStr + this.checkSymbol\n  }\n\n  matches (move: moves.Move): boolean {\n    // Promotes are only valid for pawns\n    if (this.piece !== move.state.currTurn.PAWN && this.promoteChoice) {\n      return false\n    }\n    if (!move.isNormal()) {\n      return false\n    }\n    // Be permissive in allowing a capture when not specified but require that a move like Qxe6 is a capture\n    if (this.captures && !(move.state.board.get(this.toPos).canBeCaptured(move.piece) || move.isEnPassant())) {\n      return false\n    }\n    if (move.isPromote() && this.promoteChoice !== move.promoteChoice) {\n      return false\n    }\n    if (!move.isPromote() && this.promoteChoice) {\n      return false\n    }\n    return move.piece === this.piece &&\n            (this.fromFile === null || this.fromFile === move.fromPos.file) &&\n            (this.fromRank === null || this.fromRank === move.fromPos.rank) &&\n            move.toPos.compare(this.toPos) === 0\n  }\n}\n\nexport { CastleMoveNotation, MoveNotation, NormalMoveNotation }\n","import * as pieces from './pieces'\nimport * as util from './util'\nimport * as moveNotation from './move_notation'\nimport * as state from './state'\nimport * as immmutable from 'immutable'\nimport { State } from './state'\nimport assert from 'assert'\n\nabstract class Move {\n  state: state.State\n\n  protected constructor (state: state.State) {\n    this.state = state\n    if (typeof this.toNotation !== 'function') {\n      throw new Error('To notation function not defined')\n    }\n  }\n\n  isNormal (): this is NormalMove {\n    return false\n  }\n\n  isCastle (): this is Castle {\n    return false\n  }\n\n  isEnPassant (): this is EnPassant {\n    return false\n  }\n\n  do () {\n    return this.state.flipTurn().modify(newState => this.doChain(newState))\n  }\n\n  protected doChain (state: State) {\n    if (state.isHistory()) {\n      state.moveHistory = state.moveHistory.setSize(state.moveIndex)\n      state.moveIndex++\n    }\n    state.halfMove++\n    state.moveHistory = state.moveHistory.push(this)\n    const lastFen = this.state.toAbvFen()\n    let stateCount = state.threeFoldDetect.get(lastFen)\n    if (!stateCount) {\n      stateCount = 0\n    }\n    stateCount++\n    state.threeFoldDetect = state.threeFoldDetect.set(lastFen, stateCount)\n  }\n\n  abstract invalid (): string | false\n\n  abstract toNotation(): moveNotation.MoveNotation\n}\n\nclass NormalMove extends Move {\n  piece: pieces.Piece\n  fromPos: util.Pos\n  toPos: util.Pos\n\n  constructor (state: state.State, piece: pieces.Piece, fromPos: util.Pos, toPos: util.Pos) {\n    super(state)\n    this.piece = piece\n    this.fromPos = fromPos\n    this.toPos = toPos\n  }\n\n  isNormal () {\n    return true\n  }\n\n  isPromote (): this is Promotion {\n    return false\n  }\n\n  isCapture () {\n    return this.state.board.get(this.toPos).isOccupied()\n  }\n\n  toNotation () {\n    let promoteChoice = null\n    if (this.isPromote()) {\n      promoteChoice = this.promoteChoice\n    }\n    const notation = new moveNotation.NormalMoveNotation(this.piece, this.isCapture(), null, null, this.toPos, promoteChoice)\n    let possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n    if (possibleMoves.length > 1 || (this.isCapture() && this.piece === this.piece.color.PAWN)) {\n      notation.fromFile = this.fromPos.file\n      possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n      if (possibleMoves.length > 1) {\n        notation.fromFile = null\n        notation.fromRank = this.fromPos.rank\n        possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n        if (possibleMoves.length > 1) {\n          notation.fromFile = this.fromPos.file\n          notation.fromRank = this.fromPos.rank\n        }\n      }\n    }\n    const doneMove = this.do()\n    if (doneMove.isCheckmate()) {\n      notation.checkSymbol = '#'\n    } else if (doneMove.isCheck()) {\n      notation.checkSymbol = '+'\n    }\n    return notation\n  }\n\n  invalid (): string | false {\n    if (this.piece === this.state.currTurn.KING) {\n      if (this.state.board.isProtected(this.toPos)) {\n        return 'Check'\n      }\n      return false\n    } else {\n      // In double check only the king is allowed to move\n      if (this.state.checks > 1) {\n        return 'Check'\n      }\n      if (this.state.board.isPinned(this.fromPos)) {\n        const deltaFile = this.fromPos.file - this.toPos.file\n        const deltaRank = this.fromPos.rank - this.toPos.rank\n        const knightMove = deltaFile !== 0 && deltaRank !== 0 && Math.abs(deltaFile) !== Math.abs(deltaRank)\n        if (knightMove) {\n          return 'Check'\n        }\n        const pinnedAxis = this.state.board.getPinnedAxis(this.fromPos)\n        if (deltaFile === 0 && pinnedAxis !== 0) {\n          return 'Check'\n        }\n        if (deltaRank === 0 && pinnedAxis !== 1) {\n          return 'Check'\n        }\n        if (deltaFile !== 0 && deltaRank !== 0) {\n          if (Math.sign(deltaRank) !== Math.sign(deltaFile) && pinnedAxis !== 2) {\n            return 'Check'\n          }\n          if (Math.sign(deltaRank) === Math.sign(deltaFile) && pinnedAxis !== 3) {\n            return 'Check'\n          }\n        }\n      }\n\n      // Piece must block check or capture checking piece\n      if (this.state.checks === 1 && !this.state.board.isPinned(this.toPos)) {\n        return 'Check'\n      }\n      return false\n    }\n  }\n\n  protected doChain (state: State) {\n    super.doChain(state)\n    state.board = state.board.set(this.fromPos, pieces.EMPTY)\n    state.board = state.board.set(this.toPos, this.piece)\n    if (this.state.board.get(this.toPos).isOccupied() || this.piece === this.state.currTurn.PAWN) {\n      state.halfMove = 0\n      state.threeFoldDetect = immmutable.Map()\n    }\n  }\n}\n\nclass FirstPawn extends NormalMove {\n  protected doChain (state: State) {\n    super.doChain(state)\n    const myColor = state.getColor(this.piece.color)\n    myColor.enPassantPos = this.fromPos.addRank(this.piece.color.PAWN_RANK_DIR)\n  }\n}\n\nclass EnPassant extends NormalMove {\n  isEnPassant () {\n    return true\n  }\n\n  isCapture () {\n    return true\n  }\n\n  protected doChain (state: State) {\n    super.doChain(state)\n    const passedPawn = this.toPos.addRank(-this.piece.color.PAWN_RANK_DIR)\n    assert(passedPawn)\n\n    state.board = state.board.set(passedPawn, pieces.EMPTY)\n  }\n}\n\nclass Promotion extends NormalMove {\n  promoteChoice: pieces.Piece\n\n  constructor (state: state.State, piece: pieces.Piece, fromPos: util.Pos, toPos: util.Pos, promoteChoice: pieces.Piece) {\n    super(state, piece, fromPos, toPos)\n    this.promoteChoice = promoteChoice\n  }\n\n  isPromote () {\n    return true\n  }\n\n  doChain (state: State) {\n    super.doChain(state)\n    state.board = state.board.set(this.toPos, this.promoteChoice)\n  }\n}\n\nclass Castle extends Move {\n  isKingSide: boolean\n\n  constructor (state: state.State, isKingSide: boolean) {\n    super(state)\n    this.isKingSide = isKingSide\n  }\n\n  toNotation () {\n    return new moveNotation.CastleMoveNotation(this.isKingSide)\n  }\n\n  isCastle () {\n    return true\n  }\n\n  doChain (state: State) {\n    super.doChain(state)\n    const myRook = this.state.currTurn.ROOK\n    const myKing = this.state.currTurn.KING\n    const myRank = this.state.currTurn.KING_RANK\n\n    state.board = state.board.withMutations(board => {\n      board.set(new util.Pos(4, myRank), pieces.EMPTY)\n      if (this.isKingSide) {\n        board.set(new util.Pos(5, myRank), myRook)\n        board.set(new util.Pos(6, myRank), myKing)\n        board.set(new util.Pos(7, myRank), pieces.EMPTY)\n      } else {\n        board.set(new util.Pos(3, myRank), myRook)\n        board.set(new util.Pos(2, myRank), myKing)\n        board.set(new util.Pos(0, myRank), pieces.EMPTY)\n      }\n    })\n  }\n\n  invalid () {\n    if (this.state.isCheck()) {\n      return \"Can't castle out of check\"\n    }\n\n    const myColor = this.state.getColor(this.state.currTurn)\n    const myRank = this.state.currTurn.KING_RANK\n\n    const betweenRookKing = []\n    if (this.isKingSide) {\n      if (!myColor.kingSideCastle) {\n        return \"Can't castle on king side\"\n      }\n\n      betweenRookKing.push(new util.Pos(5, myRank), new util.Pos(6, myRank))\n    } else {\n      if (!myColor.queenSideCastle) {\n        return \"Can't castle on queen side\"\n      }\n\n      betweenRookKing.push(new util.Pos(1, myRank), new util.Pos(2, myRank), new util.Pos(3, myRank))\n    }\n\n    for (const pos of betweenRookKing) {\n      if (this.state.board.get(pos).isOccupied()) {\n        return 'Pieces are between rook and king'\n      }\n    }\n\n    const badPos: util.Pos[] = []\n    if (this.isKingSide) {\n      // Can't castle though check\n      badPos.push(new util.Pos(5, myRank))\n      // Can't castle into check\n      badPos.push(new util.Pos(6, myRank))\n    } else {\n      // Can't castle into check\n      badPos.push(new util.Pos(2, myRank))\n      // Can't castle though check\n      badPos.push(new util.Pos(3, myRank))\n    }\n\n    const attacked = badPos.some(pos => this.state.board.isProtected(pos))\n    if (attacked) {\n      return \"Can't castle into or through check\"\n    }\n    return false\n  }\n}\n\nexport { Castle, Move, EnPassant, NormalMove, FirstPawn, Promotion }\n","import * as util from './util'\nimport * as pieces from './pieces'\nimport * as moves from './moves'\nimport * as immutable from 'immutable'\nimport { strict as assert } from 'assert'\n\nclass Player {\n  color: Readonly<pieces.Color>\n  queenSideCastle: boolean\n  kingSideCastle: boolean\n  enPassantPos: util.Pos | null\n\n  constructor (arg1: Player | Readonly<pieces.Color>) {\n    if (arg1 instanceof Player) {\n      const other = arg1\n      this.color = other.color\n      this.queenSideCastle = other.queenSideCastle\n      this.kingSideCastle = other.kingSideCastle\n      this.enPassantPos = other.enPassantPos\n    } else {\n      this.color = arg1\n      this.queenSideCastle = true\n      this.kingSideCastle = true\n      this.enPassantPos = null\n    }\n  }\n}\n\n/* Board format uses an array of 64 8 bit ints as so:\n  The mapping from (file, rank) to index is done according to rank * 8 + file.\n  Every square is an int in the form of pxaaciii where:\n    i is an int from 0 - 7 where:\n      0: empty\n      1: pawn\n      2: knight\n      3: bishop\n      4: rook\n      5: queen\n      6: king\n    c is 1 for black 0 for white.\n    a is an int from 0 - 3 representing the axis that a piece can move when it's pinned where:\n      0: vertical (unpinned)\n      1: horizontal\n      2: Left-Up/Right-Down\n      3: Left-Down/Right-Up\n    x is set when the king can not move to this square because a piece is protecting it\n    p has multiple meanings depending on what kind of piece it is applied to:\n        current player's piece: this piece is pinned (moving would put king in check)\n        next player's piece: this piece is delivering check to the other player\n        empty square: putting a piece here blocks check (except for double check where only the king can move)\n */\nexport class Board {\n  private readonly raw: Uint8Array\n  private readonly mutable: boolean\n\n  constructor (raw: Uint8Array, mutable: boolean) {\n    this.raw = raw\n    this.mutable = mutable\n  }\n\n  get (pos: util.Pos): pieces.Square {\n    const rawPiece = this.raw[pos.toRaw()] & 0xF\n    switch (rawPiece) {\n      case 0:\n        return pieces.EMPTY\n      case 1:\n        return pieces.WHITE.PAWN\n      case 2:\n        return pieces.WHITE.KNIGHT\n      case 3:\n        return pieces.WHITE.BISHOP\n      case 4:\n        return pieces.WHITE.ROOK\n      case 5:\n        return pieces.WHITE.QUEEN\n      case 6:\n        return pieces.WHITE.KING\n      case 9:\n        return pieces.BLACK.PAWN\n      case 10:\n        return pieces.BLACK.KNIGHT\n      case 11:\n        return pieces.BLACK.BISHOP\n      case 12:\n        return pieces.BLACK.ROOK\n      case 13:\n        return pieces.BLACK.QUEEN\n      case 14:\n        return pieces.BLACK.KING\n      default:\n        assert(false)\n    }\n  }\n\n  getPinnedAxis (pos: util.Pos): 0 | 1 | 2 | 3 {\n    return ((this.raw[pos.toRaw()] >>> 4) & 0x3) as 0 | 1 | 2 | 3\n  }\n\n  isPinned (pos: util.Pos): boolean {\n    return (this.raw[pos.toRaw()] & 0x40) === 0x40\n  }\n\n  isProtected (pos: util.Pos): boolean {\n    return (this.raw[pos.toRaw()] & 0x80) === 0x80\n  }\n\n  set (pos: util.Pos, piece: pieces.Square): Board {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0xF\n    rawValue |= piece.id\n    return this.rawSet(pos, rawValue)\n  }\n\n  clearFlags (pos: util.Pos) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= 0xF\n    return this.rawSet(pos, rawValue)\n  }\n\n  private rawSet (pos: util.Pos, raw: number) {\n    if (this.mutable) {\n      this.raw[pos.toRaw()] = raw\n      return this\n    } else {\n      const newRaw = new Uint8Array(this.raw)\n      newRaw[pos.toRaw()] = raw\n      return new Board(newRaw, false)\n    }\n  }\n\n  setPinnedAxis (pos: util.Pos, axis: 0 | 1 | 2 | 3) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x30\n    rawValue |= axis << 4\n    return this.rawSet(pos, rawValue)\n  }\n\n  setPinned (pos: util.Pos, pinned: boolean) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x40\n    rawValue |= Number(pinned) << 6\n    return this.rawSet(pos, rawValue)\n  }\n\n  setProtected (pos: util.Pos, attacked: boolean) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x80\n    rawValue |= Number(attacked) << 7\n    return this.rawSet(pos, rawValue)\n  }\n\n  reduce<ACC> (fun: (acc: ACC, piece: pieces.Square, pos: util.Pos, board: this) => ACC, acc: ACC) {\n    for (let i = 0; i < this.raw.length; i++) {\n      const pos = util.Pos.fromRaw(i)\n      acc = fun(acc, this.get(pos), pos, this)\n    }\n    return acc\n  }\n\n  asMutable () {\n    return new Board(new Uint8Array(this.raw), true)\n  }\n\n  withMutations (fn: (board: Board) => void) {\n    const raw = new Uint8Array(this.raw)\n    fn(new Board(raw, true))\n    return new Board(new Uint8Array(raw), false)\n  }\n}\n\nclass State {\n  board: Board\n  white: Player\n  black: Player\n  currTurn: Readonly<pieces.Color>\n  moveHistory: immutable.List<moves.Move>\n  historyBegin: number\n  halfMove: number\n  threeFoldDetect: immutable.Map<string, number>\n  resign: boolean\n  agreeDraw: boolean\n  checks: number\n\n  constructor (state?: State) {\n    if (typeof state !== 'object') {\n      this.board = getStartingBoard()\n      this.white = new Player(pieces.WHITE)\n      this.black = new Player(pieces.BLACK)\n      this.currTurn = pieces.WHITE\n      this.moveHistory = immutable.List()\n      this.historyBegin = 2\n      this.halfMove = 0\n      this.threeFoldDetect = immutable.Map()\n      this.resign = false\n      this.agreeDraw = false\n      this.checks = 0\n    } else {\n      this.board = state.board\n      this.white = new Player(state.white)\n      this.black = new Player(state.black)\n      this.currTurn = state.currTurn\n      this.moveHistory = state.moveHistory\n      this.historyBegin = state.historyBegin\n      this.halfMove = state.halfMove\n      this.threeFoldDetect = state.threeFoldDetect\n      this.resign = state.resign\n      this.agreeDraw = state.agreeDraw\n      this.checks = state.checks\n    }\n  }\n\n  moveCount () {\n    return Math.floor((this.historyBegin + this.moveHistory.size) / 2)\n  }\n\n  commandPrompt () {\n    let gameOverStr = ''\n    if (this.isGameOver()) {\n      gameOverStr = 'Game Over '\n    }\n    if (this.currTurn === pieces.WHITE) {\n      return gameOverStr + `${this.moveCount()}. WHITE>`\n    } else {\n      return gameOverStr + `${this.moveCount()}. BLACK>`\n    }\n  }\n\n  toFen () {\n    let fen = ''\n    for (let rank = 7; rank >= 0; rank--) {\n      let emptyRun = 0\n      if (rank !== 7) {\n        fen += '/'\n      }\n      for (let file = 0; file < 8; file++) {\n        const piece = this.board.get(new util.Pos(file, rank))\n        if (piece.isOccupied()) {\n          if (emptyRun) {\n            fen += String(emptyRun)\n            emptyRun = 0\n          }\n          fen += piece.fenLetter\n        } else {\n          emptyRun++\n        }\n      }\n      if (emptyRun) {\n        fen += String(emptyRun)\n      }\n    }\n    fen += ' '\n    if (this.currTurn === pieces.WHITE) {\n      fen += 'w'\n    } else {\n      fen += 'b'\n    }\n    fen += ' '\n    if (this.white.kingSideCastle) {\n      fen += 'K'\n    }\n    if (this.white.queenSideCastle) {\n      fen += 'Q'\n    }\n    if (this.black.kingSideCastle) {\n      fen += 'k'\n    }\n    if (this.black.queenSideCastle) {\n      fen += 'q'\n    }\n    if (!(this.white.kingSideCastle || this.white.queenSideCastle || this.black.kingSideCastle || this.black.queenSideCastle)) {\n      fen += '-'\n    }\n    fen += ' '\n    if (this.white.enPassantPos) {\n      fen += this.white.enPassantPos.toString()\n    } else if (this.black.enPassantPos) {\n      fen += this.black.enPassantPos.toString()\n    } else {\n      fen += '-'\n    }\n    fen += ' '\n    fen += String(this.halfMove)\n    fen += ' '\n    fen += String(this.moveCount())\n    return fen\n  }\n\n  toAbvFen () {\n    const lastFenLst = this.toFen().split(' ')\n    lastFenLst.pop()\n    lastFenLst.pop()\n    return lastFenLst.join(' ')\n  }\n\n  modify (fn: (state: State) => void) {\n    const newState = new State(this)\n    newState.board = newState.board.asMutable()\n    fn(newState)\n    newState.board = newState.board.asMutable()\n\n    newState.checks = 0\n    if (newState.board.get(new util.Pos(4, 0)) !== pieces.WHITE.KING) {\n      newState.white.kingSideCastle = false\n      newState.white.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(0, 0)) !== pieces.WHITE.ROOK) {\n      newState.white.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(7, 0)) !== pieces.WHITE.ROOK) {\n      newState.white.kingSideCastle = false\n    }\n\n    if (newState.board.get(new util.Pos(4, 7)) !== pieces.BLACK.KING) {\n      newState.black.kingSideCastle = false\n      newState.black.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(0, 7)) !== pieces.BLACK.ROOK) {\n      newState.black.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(7, 7)) !== pieces.BLACK.ROOK) {\n      newState.black.kingSideCastle = false\n    }\n\n    let enPassantPossible = false\n    let enPassantPos = newState.white.enPassantPos\n    if (newState.black.enPassantPos) {\n      enPassantPos = newState.black.enPassantPos\n    }\n    do {\n      if (!enPassantPos) {\n        break\n      }\n      if (newState.board.get(enPassantPos) !== pieces.EMPTY) {\n        break\n      }\n      if (enPassantPos.rank !== newState.currTurn.OTHER_COLOR.PAWN_RANK - newState.currTurn.PAWN_RANK_DIR) {\n        break\n      }\n      const enPassantPiecePos = enPassantPos.addRank(-this.currTurn.PAWN_RANK_DIR)!\n      if (newState.board.get(enPassantPiecePos) !== newState.currTurn.OTHER_COLOR.PAWN) {\n        break\n      }\n      const enPassPos = enPassantPos\n      const tmpState = newState.modify(tmpState => {\n        tmpState.white.enPassantPos = null\n        tmpState.black.enPassantPos = null\n        tmpState.board.set(enPassantPiecePos, pieces.EMPTY)\n        tmpState.board.set(enPassPos, this.currTurn.OTHER_COLOR.PAWN)\n      })\n      const leftDiag = enPassantPiecePos.addFile(-1)\n      if (leftDiag) {\n        const leftPawnPinned = tmpState.board.isPinned(leftDiag) && tmpState.board.getPinnedAxis(leftDiag) !== 3\n        if (tmpState.board.get(leftDiag) === this.currTurn.PAWN && !leftPawnPinned) {\n          enPassantPossible = true\n          break\n        }\n      }\n\n      const rightDiag = enPassantPiecePos.addFile(1)\n      if (rightDiag) {\n        const rightPawnPinned = tmpState.board.isPinned(rightDiag) && tmpState.board.getPinnedAxis(rightDiag) !== 2\n        if (tmpState.board.get(rightDiag) === this.currTurn.PAWN && !rightPawnPinned) {\n          enPassantPossible = true\n        }\n      }\n    } while (false)\n\n    if (!enPassantPossible) {\n      newState.white.enPassantPos = null\n      newState.black.enPassantPos = null\n    }\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        newState.board.clearFlags(pos)\n      }\n    }\n\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        const piece = newState.board.get(pos)\n        if (piece.isOccupied() && piece.color !== newState.currTurn) {\n          const protects = piece.protects(newState, pos)\n          for (const prot of protects) {\n            newState.board.setProtected(prot, true)\n            if (newState.board.get(prot) === newState.currTurn.KING) {\n              newState.checks++\n              newState.board.setPinned(pos, true)\n            }\n          }\n          piece.pin(newState, pos)\n        }\n      }\n    }\n\n    newState.board = newState.board.withMutations(() => {})\n    return newState\n  }\n\n  getColor (color: pieces.Color) {\n    switch (color) {\n      case pieces.WHITE:\n        return this.white\n      case pieces.BLACK:\n        return this.black\n      default:\n        throw new Error('Not a color')\n    }\n  }\n\n  flipTurn () {\n    return this.modify(newState => {\n      newState.currTurn = newState.currTurn.OTHER_COLOR\n      newState.getColor(newState.currTurn).enPassantPos = null\n      return newState\n    })\n  }\n\n  moves () {\n    let moveList: moves.Move[] = []\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        const piece = this.board.get(pos)\n        if (piece.isOccupied() && piece.color === this.currTurn) {\n          moveList = moveList.concat(piece.moves(this, pos))\n        }\n      }\n    }\n    moveList.push(new moves.Castle(this, true), new moves.Castle(this, false))\n    return moveList\n  }\n\n  isDraw () {\n    return this.agreeDraw || (!this.isCheckmate() && !this.moves().some(x => !x.invalid())) || this.isThreeFold() || this.halfMove >= 100\n  }\n\n  isGameOver () {\n    return !this.moves().some(x => !x.invalid()) || this.isDraw() || this.resign\n  }\n\n  drawReason () {\n    if (this.isThreeFold()) {\n      return 'three fold repetition'\n    } else if (this.halfMove >= 100) {\n      return '50 move rule'\n    } else {\n      return 'stalemate'\n    }\n  }\n\n  isThreeFold () {\n    const fen = this.toAbvFen()\n    const count = Number(this.threeFoldDetect.get(fen))\n    return count >= 2\n  }\n\n  isCheck () {\n    return this.checks !== 0\n  }\n\n  isCheckmate () {\n    return !this.moves().some(x => !x.invalid()) && this.isCheck()\n  }\n\n  back (): State {\n    if (this.moveHistory.size === 0) {\n      return this\n    }\n    return Object.freeze(new HistoryState(this.moveHistory.last(undefined)!.state, this.moveHistory, this.moveHistory.size - 1))\n  }\n\n  forward (): State {\n    return this\n  }\n\n  endAltHistory (): State {\n    return this\n  }\n\n  isHistory (): this is HistoryState {\n    return false\n  }\n\n  perft (depth: number) {\n    if (depth === 0) {\n      return 1\n    }\n\n    const moves = this.moves().filter(x => !x.invalid())\n    let nodes = 0\n    for (const move of moves) {\n      nodes += move.do().perft(depth - 1)\n    }\n    return nodes\n  }\n\n  toPGN (gameStartTime: Date, eventName: string, siteName: string, round: string, whiteName: string, blackName: string) {\n    eventName = eventName.trim()\n    if (eventName === '') {\n      eventName = 'Casual Game'\n    }\n    siteName = siteName.trim()\n    if (siteName === '') {\n      siteName = 'Local Game'\n    }\n    round = round.trim()\n    if (round === '') {\n      round = '-'\n    }\n    whiteName = whiteName.trim()\n    if (whiteName === '') {\n      whiteName = 'Unknown'\n    }\n    blackName = blackName.trim()\n    if (blackName === '') {\n      blackName = 'Unknown'\n    }\n    const date = `${gameStartTime.getFullYear()}.${gameStartTime.getMonth()}.${gameStartTime.getDate()}`\n    const exportState = this.endAltHistory().end()\n    let result = '*'\n    if (exportState.isGameOver()) {\n      if (exportState.isDraw()) {\n        result = '1/2-1/2'\n      } else if (exportState.currTurn === pieces.WHITE) {\n        result = '0-1'\n      } else {\n        result = '1-0'\n      }\n    }\n    const pgnTags = [['Event', eventName], ['Site', siteName], ['Date', date], ['Round', round],\n      ['White', whiteName], ['Black', blackName], ['Result', result]]\n    const beginState = exportState.begin()\n    if (beginState.toFen() !== getStartState().toFen()) {\n      pgnTags.push(['SetUp', '1'])\n      pgnTags.push(['FEN', beginState.toFen()])\n    }\n    let outputStr = ''\n    for (const tag of pgnTags) {\n      const tagLine = `[${tag[0]} \"${tag[1]}\"]\\n`\n      outputStr += tagLine\n    }\n    const moveLineGen = new util.PgnMoveLineGen()\n    let moveCount = beginState.historyBegin\n    // If game state starts from black\n    if (moveCount % 2 === 1) {\n      moveLineGen.addToken(`${Math.floor(moveCount / 2)}...`)\n    }\n    for (const move of exportState.moveHistory) {\n      if (moveCount % 2 === 0) {\n        moveLineGen.addToken(`${Math.floor(moveCount / 2)}.`)\n      }\n      moveCount++\n      moveLineGen.addToken(move.toNotation().toString())\n    }\n    moveLineGen.addToken(result)\n    return outputStr + moveLineGen.done() + '\\n'\n  }\n\n  begin () {\n    let lastState: State = this\n    let state = this.back()\n    while (state !== lastState) {\n      lastState = state\n      state = state.back()\n    }\n    return state\n  }\n\n  end () {\n    let lastState: State = this\n    let state = this.forward()\n    while (state !== lastState) {\n      lastState = state\n      state = state.forward()\n    }\n    return state\n  }\n}\n\nclass HistoryState extends State {\n  moveIndex: number\n\n  constructor (state: State, history: immutable.List<moves.Move>, moveIndex: number) {\n    super(state)\n    this.moveHistory = history\n    this.moveIndex = moveIndex\n  }\n\n  moveCount () {\n    return Math.floor((this.moveIndex + this.historyBegin) / 2)\n  }\n\n  back () {\n    if (this.moveIndex === 0) {\n      return this\n    }\n    const moveIndex = this.moveIndex - 1\n    const lastState = this.moveHistory.get(moveIndex)!.state\n    if (lastState.isHistory()) {\n      return lastState\n    }\n    return Object.freeze(new HistoryState(lastState, this.moveHistory, moveIndex))\n  }\n\n  forward () {\n    if (this.moveIndex >= this.moveHistory.size - 1) {\n      return this.moveHistory.last(undefined)!.do()\n    }\n    const moveIndex = this.moveIndex + 1\n    const forwardState = this.moveHistory.get(moveIndex)!.state\n    if (forwardState.isHistory()) {\n      return forwardState\n    }\n    return Object.freeze(new HistoryState(forwardState, this.moveHistory, moveIndex))\n  }\n\n  modify (fn: (state: State) => void) {\n    const newState = new AltHistoryState(this, this.moveHistory, this.moveIndex)\n    fn(newState)\n    Object.freeze(newState.white)\n    Object.freeze(newState.black)\n    return Object.freeze(newState)\n  }\n\n  commandPrompt () {\n    if (this.currTurn === pieces.WHITE) {\n      return `History ${this.moveCount()}. WHITE>`\n    } else {\n      return `History ${this.moveCount()}. BLACK>`\n    }\n  }\n\n  isHistory () {\n    return true\n  }\n}\n\nclass AltHistoryState extends HistoryState {\n  altBranch: State\n\n  constructor (state: State, history: immutable.List<moves.Move>, moveIndex: number) {\n    super(state, history, moveIndex)\n    if (state instanceof AltHistoryState) {\n      this.altBranch = state.altBranch\n    } else {\n      this.altBranch = state\n    }\n  }\n\n  endAltHistory (): State {\n    return this.altBranch\n  }\n\n  commandPrompt () {\n    if (this.currTurn === pieces.WHITE) {\n      return `Alt History ${this.moveCount()}. WHITE>`\n    } else {\n      return `Alt History ${this.moveCount()}. BLACK>`\n    }\n  }\n}\n\nlet START_STATE: State | null = null\nlet STARTING_BOARD: Board | null = null\n\nfunction getStartingBoard (): Board {\n  if (!STARTING_BOARD) {\n    const board = new Uint8Array(64)\n    for (let i = 0; i < 64; i++) {\n      board[i] = pieces.EMPTY.id\n    }\n    board.set([pieces.WHITE.ROOK.id, pieces.WHITE.KNIGHT.id, pieces.WHITE.BISHOP.id, pieces.WHITE.QUEEN.id,\n      pieces.WHITE.KING.id, pieces.WHITE.BISHOP.id, pieces.WHITE.KNIGHT.id, pieces.WHITE.ROOK.id], 0)\n    for (let i = 8; i < 16; i++) {\n      board[i] = pieces.WHITE.PAWN.id\n    }\n    for (let i = 48; i < 56; i++) {\n      board[i] = pieces.BLACK.PAWN.id\n    }\n    board.set([pieces.BLACK.ROOK.id, pieces.BLACK.KNIGHT.id, pieces.BLACK.BISHOP.id, pieces.BLACK.QUEEN.id,\n      pieces.BLACK.KING.id, pieces.BLACK.BISHOP.id, pieces.BLACK.KNIGHT.id, pieces.BLACK.ROOK.id], 56)\n    STARTING_BOARD = new Board(board, false)\n  }\n  return STARTING_BOARD\n}\n\nfunction getStartState (): State {\n  if (!START_STATE) {\n    START_STATE = new State().modify(x => x)\n  }\n  return START_STATE\n}\n\nconst FEN_REGEX = /^((?:[kqnbrpKQNBRP1-8]+\\/){7}[kqnbrpKQNBRP1-8]+)\\s+([bw])\\s+(KQ?k?q?|Qk?q?|kq?|q|-)\\s+((?:[a-h][36])|-)\\s+(\\d+)\\s+(\\d+)$/\n\nfunction stateFromFen (fen: string) {\n  const board = new Uint8Array(64)\n  for (let i = 0; i < 64; i++) {\n    board[i] = pieces.EMPTY.id\n  }\n  let rank = 7\n  const parsedFen = FEN_REGEX.exec(fen.trim())\n  if (!parsedFen) {\n    throw new Error('Fen syntax error')\n  }\n  const rawBoard = parsedFen[1].split('/')\n  for (const rawRow of rawBoard) {\n    let file = 0\n    for (const char of rawRow) {\n      if (file >= 8) {\n        throw new Error('Fen board has too many pieces on one row')\n      }\n      const asNum = Number(char)\n      if (asNum) {\n        file += asNum\n      } else {\n        board[new util.Pos(file, rank).toRaw()] = pieces.FROM_FEN.get(char)!.id\n        file++\n      }\n    }\n    if (file < 7) {\n      throw new Error('Fen board has too little pieces on one row')\n    }\n    if (file > 8) {\n      throw new Error('Fen board has too many pieces on one row')\n    }\n    rank--\n  }\n  let currPlayer = pieces.WHITE\n  if (parsedFen[2] === 'b') {\n    currPlayer = pieces.BLACK\n  }\n  const white = new Player(pieces.WHITE)\n  white.kingSideCastle = parsedFen[3].includes('K')\n  white.queenSideCastle = parsedFen[3].includes('Q')\n  const black = new Player(pieces.BLACK)\n  black.kingSideCastle = parsedFen[3].includes('k')\n  black.queenSideCastle = parsedFen[3].includes('q')\n\n  const enPassantPos = parsedFen[4]\n  if (enPassantPos !== '-') {\n    let enPassantPlayer = black\n    if (currPlayer === pieces.BLACK) {\n      enPassantPlayer = white\n    }\n    const file = util.convertFileLetter(enPassantPos[0])\n    const rank = util.convertRankLetter(enPassantPos[1])\n    enPassantPlayer.enPassantPos = new util.Pos(file, rank)\n  }\n  const halfMove = Number(parsedFen[5])\n  let moveCount = Number(parsedFen[6]) * 2\n  if (moveCount === 0) {\n    throw new Error('Chess games start on move 1')\n  }\n  if (currPlayer === pieces.BLACK) {\n    moveCount++\n  }\n  return getStartState().modify(x => {\n    x.board = new Board(board, false)\n    x.white = white\n    x.black = black\n    x.currTurn = currPlayer\n    x.historyBegin = moveCount\n    x.halfMove = halfMove\n  })\n}\n\nexport { State, getStartState, stateFromFen }\n","import * as moves from './moves'\nimport * as state from './state'\nimport * as util from './util'\nimport * as immutable from 'immutable'\nimport { State } from './state'\n\nclass ConstructorKey {}\n\nabstract class Square {\n  constructor (_key: ConstructorKey) {\n    if (typeof this.isOccupied !== 'function') {\n      throw new Error('isOccupied function not defined')\n    }\n\n    if (typeof this.canMoveOnto !== 'function') {\n      throw new Error('canMoveOnto function not defined')\n    }\n\n    if (typeof this.canBeCaptured !== 'function') {\n      throw new Error('canBeCaptured function not defined')\n    }\n  }\n\n  id = 0\n  abstract isOccupied (): this is Piece;\n  abstract canMoveOnto (piece: Piece): boolean;\n  abstract canBeCaptured (piece: Piece): boolean;\n}\n\nclass EmptySquare extends Square {\n  isOccupied () {\n    return false\n  }\n\n  canMoveOnto (_other: Piece) {\n    return true\n  }\n\n  canBeCaptured (_other: Piece) {\n    return false\n  }\n}\n\nfunction moveLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  const moveList = []\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    moveList.push(new moves.NormalMove(state, piece, fromPos, toPos))\n    // Once the piece hits another piece stop\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n  return moveList\n}\n\nfunction protectLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  const protects = []\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    protects.push(toPos)\n    // Once the piece hits another piece stop except for king\n    const targetPiece = state.board.get(toPos)\n    if (targetPiece.canBeCaptured(piece) && targetPiece !== state.currTurn.KING) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n\n  if (toPos) {\n    protects.push(toPos)\n  }\n  return protects\n}\n\nfunction applyCheckPinFlag (state: state.State, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos) !== state.currTurn.KING) {\n    state.board.setPinned(toPos, true)\n    toPos = toPos.add(line[0], line[1])\n  }\n}\n\nfunction checkForKing (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    if (state.board.get(toPos) === state.currTurn.KING) {\n      return true\n    }\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n  return false\n}\n\nfunction pinLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      if (state.board.get(toPos) === state.currTurn.KING) {\n        applyCheckPinFlag(state, fromPos, line)\n      } else if (checkForKing(state, piece, toPos, line)) {\n        state.board.setPinned(toPos, true)\n        let pinnedAxis: 0 | 1 | 2 | 3 = 0\n        if ((line[0] === 1 && line[1] === 0) || (line[0] === -1 && line[1] === 0)) {\n          pinnedAxis = 1\n        } else if ((line[0] === -1 && line[1] === 1) || (line[0] === 1 && line[1] === -1)) {\n          pinnedAxis = 2\n        } else if ((line[0] === -1 && line[1] === -1) || (line[0] === 1 && line[1] === 1)) {\n          pinnedAxis = 3\n        }\n        state.board.setPinnedAxis(toPos, pinnedAxis)\n      }\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n}\n\nabstract class Piece extends Square {\n  color: Readonly<Color>\n  fenLetter: string\n\n  constructor (key: ConstructorKey, color: Readonly<Color>, fenLetter: string, id: number) {\n    super(key)\n\n    if (typeof this.moves !== 'function') {\n      throw new Error('Moves function not defined')\n    }\n    if (typeof this.getPGNLetter !== 'function') {\n      throw new Error('Get pgn letter not defined')\n    }\n\n    this.color = color\n    this.fenLetter = fenLetter\n    this.id = id\n  }\n\n  isOccupied () {\n    return true\n  }\n\n  canMoveOnto (other: Piece) {\n    return this.color !== other.color\n  }\n\n  canBeCaptured (other: Piece) {\n    return this.canMoveOnto(other)\n  }\n\n  // This method will get a mutable state\n  pin (state: State, pos: util.Pos) {}\n\n  abstract moves (state: state.State, myPos: util.Pos): moves.Move[]\n  abstract protects (state: state.State, myPos: util.Pos): util.Pos[]\n  abstract getPGNLetter(): string\n}\n\nclass Pawn extends Piece {\n  addMove (state: state.State, moveList: moves.Move[], fromPos: util.Pos, toPos: util.Pos) {\n    if (toPos.rank === this.color.OTHER_COLOR.KING_RANK) {\n      for (const choice of this.color.PROMOTE_LIST) {\n        moveList.push(new moves.Promotion(state, this, fromPos, toPos, choice))\n      }\n    } else {\n      moveList.push(new moves.NormalMove(state, this, fromPos, toPos))\n    }\n  }\n\n  getPGNLetter () {\n    return ''\n  }\n\n  moves (state: state.State, myPos: util.Pos) {\n    const moveList: moves.Move[] = []\n    const forwardMove = myPos.addRank(this.color.PAWN_RANK_DIR)\n\n    if (!forwardMove) {\n      return moveList\n    }\n    const forwardOccupied = state.board.get(forwardMove!).isOccupied()\n    if (!forwardOccupied) {\n      this.addMove(state, moveList, myPos, forwardMove!)\n    }\n    if (!forwardOccupied && this.color.PAWN_RANK === myPos.rank) {\n      const firstMove = myPos.addRank(this.color.PAWN_RANK_DIR * 2)\n      console.assert(firstMove, 'First move should be in bounds')\n      if (!state.board.get(firstMove!).isOccupied()) {\n        moveList.push(new moves.FirstPawn(state, this, myPos, firstMove!))\n      }\n    }\n    const otherColor = state.getColor(this.color.OTHER_COLOR)\n    const leftDiag = myPos.add(-1, this.color.PAWN_RANK_DIR)\n\n    if (leftDiag && state.board.get(leftDiag).canBeCaptured(this)) {\n      this.addMove(state, moveList, myPos, leftDiag)\n    }\n    const rightDiag = myPos.add(1, this.color.PAWN_RANK_DIR)\n    if (rightDiag && state.board.get(rightDiag).canBeCaptured(this)) {\n      this.addMove(state, moveList, myPos, rightDiag)\n    }\n    if (otherColor.enPassantPos) {\n      if (leftDiag && otherColor.enPassantPos.compare(leftDiag) === 0) {\n        moveList.push(new moves.EnPassant(state, this, myPos, leftDiag))\n      }\n      if (rightDiag && otherColor.enPassantPos.compare(rightDiag) === 0) {\n        moveList.push(new moves.EnPassant(state, this, myPos, rightDiag))\n      }\n    }\n\n    return moveList\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const protects = []\n    const leftDiag = myPos.add(-1, this.color.PAWN_RANK_DIR)\n    if (leftDiag) {\n      protects.push(leftDiag)\n    }\n    const rightDiag = myPos.add(1, this.color.PAWN_RANK_DIR)\n    if (rightDiag) {\n      protects.push(rightDiag)\n    }\n    return protects\n  }\n}\n\nclass Rook extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return (line\n      .map(line => moveLine(state, this, pos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n\n  getPGNLetter () {\n    return 'R'\n  }\n\n  pin (state: State, pos: util.Pos) {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return line.forEach(line => pinLine(state, this, pos, line))\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return (line\n      .map(line => protectLine(state, this, myPos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n}\n\nclass Knight extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const knightPos = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]]\n    const moveList = []\n    for (const deltaPos of knightPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos && state.board.get(newPos).canMoveOnto(this)) {\n        moveList.push(new moves.NormalMove(state, this, pos, newPos))\n      }\n    }\n    return moveList\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    const knightPos = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]]\n    const protects = []\n    for (const deltaPos of knightPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos) {\n        protects.push(newPos)\n      }\n    }\n    return protects\n  }\n\n  getPGNLetter () {\n    return 'N'\n  }\n}\n\nclass Bishop extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return (line\n      .map(line => moveLine(state, this, pos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n\n  getPGNLetter () {\n    return 'B'\n  }\n\n  pin (state: State, pos: util.Pos) {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return line.forEach(line => pinLine(state, this, pos, line))\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return (line\n      .map(line => protectLine(state, this, myPos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n}\n\nclass Queen extends Piece {\n  moves (state: state.State, pos: util.Pos) {\n    return Bishop.prototype.moves.call(this, state, pos).concat(Rook.prototype.moves.call(this, state, pos))\n  }\n\n  getPGNLetter () {\n    return 'Q'\n  }\n\n  pin (state: state.State, pos: util.Pos) {\n    Bishop.prototype.pin.call(this, state, pos)\n    Rook.prototype.pin.call(this, state, pos)\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    return Bishop.prototype.protects.call(this, state, pos).concat(Rook.prototype.protects.call(this, state, pos))\n  }\n}\n\nclass King extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const kingPos = [[1, 0], [1, 1], [-1, 0], [-1, -1], [1, -1], [-1, 1], [0, 1], [0, -1]]\n    const moveList = []\n    for (const deltaPos of kingPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos && state.board.get(newPos).canMoveOnto(this)) {\n        moveList.push(new moves.NormalMove(state, this, pos, newPos))\n      }\n    }\n    return moveList\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    const kingPos = [[1, 0], [1, 1], [-1, 0], [-1, -1], [1, -1], [-1, 1], [0, 1], [0, -1]]\n    const protects = []\n    for (const deltaPos of kingPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos) {\n        protects.push(newPos)\n      }\n    }\n    return protects\n  }\n\n  getPGNLetter () {\n    return 'K'\n  }\n}\n\nexport interface Color {\n  PAWN: Readonly<Piece>,\n  ROOK: Readonly<Piece>,\n  KNIGHT: Readonly<Piece>,\n  BISHOP: Readonly<Piece>,\n  QUEEN: Readonly<Piece>,\n  KING: Readonly<Piece>,\n  KING_RANK: number,\n  PAWN_RANK: number,\n  PAWN_RANK_DIR: number,\n  PROMOTE_LIST: Readonly<Readonly<Piece>[]>\n  FROM_LETTER: immutable.Map<string, Readonly<Piece>>,\n  OTHER_COLOR: Readonly<Color>,\n}\n\nfunction genColor (kingRank: number, pawnRank: number, pawnRankDir: number, fenConv: (l: string) => string, idOffset: number) {\n  const ret = {} as Color\n  const key = new ConstructorKey()\n  Object.assign(ret, {\n    PAWN: Object.freeze(new Pawn(key, ret, fenConv('P'), 1 + idOffset)),\n    KNIGHT: Object.freeze(new Knight(key, ret, fenConv('N'), 2 + idOffset)),\n    BISHOP: Object.freeze(new Bishop(key, ret, fenConv('B'), 3 + idOffset)),\n    ROOK: Object.freeze(new Rook(key, ret, fenConv('R'), 4 + idOffset)),\n    QUEEN: Object.freeze(new Queen(key, ret, fenConv('Q'), 5 + idOffset)),\n    KING: Object.freeze(new King(key, ret, fenConv('K'), 6 + idOffset)),\n    KING_RANK: kingRank,\n    PAWN_RANK: pawnRank,\n    PAWN_RANK_DIR: pawnRankDir\n  })\n  ret.PROMOTE_LIST = Object.freeze([ret.QUEEN, ret.KNIGHT, ret.ROOK, ret.BISHOP])\n  const fromLetter: [string, Piece][] = [['K', ret.KING], ['Q', ret.QUEEN], ['R', ret.ROOK],\n    ['B', ret.BISHOP], ['N', ret.KNIGHT], ['', ret.PAWN]]\n  ret.FROM_LETTER = immutable.Map(fromLetter)\n  return ret\n}\n\nconst WRITABLE_WHITE = genColor(0, 1, 1, x => x, 0)\nconst WRITABLE_BLACK = genColor(7, 6, -1, x => x.toLowerCase(), 8)\nWRITABLE_WHITE.OTHER_COLOR = WRITABLE_BLACK\nObject.freeze(WRITABLE_WHITE)\nWRITABLE_BLACK.OTHER_COLOR = WRITABLE_WHITE\nObject.freeze(WRITABLE_BLACK)\n\nconst WHITE: Readonly<Color> = WRITABLE_WHITE\nconst BLACK: Readonly<Color> = WRITABLE_BLACK\n\nconst FROM_FEN_ARRAY: [string, Readonly<Piece>][] = [['K', WHITE.KING], ['Q', WHITE.QUEEN], ['R', WHITE.ROOK],\n  ['B', WHITE.BISHOP], ['N', WHITE.KNIGHT], ['P', WHITE.PAWN],\n  ['k', BLACK.KING], ['q', BLACK.QUEEN], ['r', BLACK.ROOK],\n  ['b', BLACK.BISHOP], ['n', BLACK.KNIGHT], ['p', BLACK.PAWN]]\n\nconst FROM_FEN = immutable.Map(FROM_FEN_ARRAY)\n\nconst EMPTY = Object.freeze(new EmptySquare(new ConstructorKey()))\n\nexport {\n  EMPTY,\n  WHITE,\n  BLACK,\n  FROM_FEN,\n  Piece,\n  Square\n}\n","import { BLACK, Square, WHITE } from './logic/pieces'\nimport * as React from 'react'\nimport { Theme, ThemeManager } from './theme'\n\nexport interface BoardSquareProps {\n  isBlack?: boolean\n  inCheck?: boolean\n  piece: Square\n  onClick?: () => void\n  highlighted?: boolean\n  canMoveTo?: boolean\n  children?: React.ReactNode\n  theme: ThemeManager\n}\n\nfunction getPieceName (piece: Square): string | undefined {\n  switch (piece) {\n    case WHITE.QUEEN:\n      return 'White Queen'\n    case WHITE.KING:\n      return 'White King'\n    case WHITE.BISHOP:\n      return 'White Bishop'\n    case WHITE.ROOK:\n      return 'White Rook'\n    case WHITE.KNIGHT:\n      return 'White Knight'\n    case WHITE.PAWN:\n      return 'White Pawn'\n    case BLACK.QUEEN:\n      return 'Black Queen'\n    case BLACK.KING:\n      return 'Black King'\n    case BLACK.BISHOP:\n      return 'Black Bishop'\n    case BLACK.ROOK:\n      return 'Black Rook'\n    case BLACK.KNIGHT:\n      return 'Black Knight'\n    case BLACK.PAWN:\n      return 'Black Pawn'\n  }\n  return undefined\n}\n\nfunction getPieceImage (theme: Theme, piece: Square): React.ReactNode | undefined {\n  const name = getPieceName(piece)\n  if (name) {\n    return <img alt={name} className='ChessPiece' src={process.env.PUBLIC_URL + `pieces/${theme.piece.prefix}/${name}.svg`} />\n  }\n  return undefined\n}\n\nexport default function BoardSquare (props: BoardSquareProps) {\n  let className = `ChessBoardSquare ${props.theme.className}`\n  if (props.isBlack) {\n    className += ' ChessBoardSquareBlack'\n  } else {\n    className += ' ChessBoardSquareWhite'\n  }\n  let highlight\n  if (props.highlighted) {\n    highlight =\n      <svg className='Overlay'>\n        <rect width='100%' height='100%' fill='yellow' fillOpacity='.5' />\n      </svg>\n  }\n  let checkHighlight\n  if (props.inCheck) {\n    checkHighlight =\n      <svg className='Overlay'>\n        <rect width='100%' height='100%' fill='red' fillOpacity='.5' />\n      </svg>\n  }\n  const pieceImage = getPieceImage(props.theme.theme, props.piece)\n  let moveIndicator\n  if (props.canMoveTo && !pieceImage) {\n    moveIndicator =\n      <svg className='Overlay'>\n        <circle r='10%' cx='50%' cy='50%' />\n      </svg>\n  }\n  if (props.canMoveTo && pieceImage) {\n    moveIndicator =\n      <svg className='Overlay'>\n        <circle r='47.5%' cx='50%' cy='50%' fill='none' stroke='black' strokeWidth='2.5%' />\n      </svg>\n  }\n  return (\n    <div className={className} onClick={props.onClick}>\n      {highlight}\n      {checkHighlight}\n      {pieceImage}\n      {moveIndicator}\n      {props.children}\n    </div>\n  )\n}\n","import * as immutable from 'immutable'\nimport { Promotion } from './logic/moves'\nimport { State } from './logic/state'\nimport BoardSquare from './BoardSquare'\nimport * as React from 'react'\nimport { ThemeManager } from './theme'\n\ninterface PromoteMenuProps {\n  moves: immutable.List<Promotion>,\n  onPromote: (state: State) => void,\n  theme: ThemeManager\n}\n\nexport default function PromoteMenu (props: PromoteMenuProps) {\n  const promotes = []\n  let key = 0\n  for (const move of props.moves) {\n    const onClick = () => {\n      props.onPromote(move.do())\n    }\n    promotes.push(<BoardSquare key={key++} piece={move.promoteChoice} onClick={onClick} theme={props.theme} />)\n  }\n  return (\n    <div className='PromoteMenu'>\n      {promotes}\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useState } from 'react'\nimport { Pos } from './logic/util'\nimport { Move, Promotion } from './logic/moves'\nimport { BLACK, EMPTY, Piece } from './logic/pieces'\nimport { State } from './logic/state'\nimport * as immutable from 'immutable'\nimport PromoteMenu from './PromoteMenu'\nimport BoardSquare from './BoardSquare'\nimport { ThemeManager } from './theme'\n\nexport interface ChessBoardSetup {\n  setupPiece?: Piece\n}\n\nexport interface ChessBoardProps {\n  state: State\n  setup?: ChessBoardSetup\n  highlightedPos?: Pos\n  changeHighlight?: (pos: Pos | undefined) => void\n  makeMove?: (state: State) => void\n  theme: ThemeManager\n}\n\nexport default function ChessBoard (props: ChessBoardProps) {\n  const [promotePos, setPromotePos] = useState<Pos | null>(null)\n  const highlightedPos = props.highlightedPos\n\n  if (props.changeHighlight && highlightedPos && (!props.state.board.get(highlightedPos).isOccupied() || props.setup?.setupPiece)) {\n    props.changeHighlight(undefined)\n  }\n  if (!highlightedPos && promotePos) {\n    setPromotePos(null)\n  }\n\n  const squares = []\n  let isBlack = false\n  let moves: Move[] = []\n  let drawPromotePos = promotePos\n  if (drawPromotePos && props.state.currTurn === BLACK) {\n    drawPromotePos = drawPromotePos.addRank(3)\n  }\n  if (highlightedPos && props.makeMove) {\n    const moveFilter = (move: Move) => {\n      if (move.invalid() || props.state.isGameOver()) {\n        return false\n      }\n      if (move.isNormal()) {\n        return move.fromPos.compare(highlightedPos) === 0\n      }\n      if (move.isCastle()) {\n        return highlightedPos.rank === props.state.currTurn.KING_RANK && highlightedPos.file === 4\n      }\n      return false\n    }\n    moves = props.state.moves().filter(moveFilter)\n    // Display black's moves as well\n    if (props.setup) {\n      moves = moves.concat(props.state.flipTurn().moves().filter(moveFilter))\n    }\n  }\n  for (let i = 7; i >= 0; i--) {\n    isBlack = !isBlack\n    for (let j = 0; j < 8; j++) {\n      isBlack = !isBlack\n      const pos = new Pos(j, i)\n      const highlighted = Boolean(highlightedPos && pos.compare(highlightedPos) === 0)\n      const piece = props.state.board.get(new Pos(j, i))\n      const inCheck = piece === props.state.currTurn.KING && props.state.isCheck()\n      const moveIndex = moves.findIndex(move => {\n        if (move.isNormal()) {\n          return move.toPos.compare(pos) === 0\n        }\n        if (move.isCastle()) {\n          if (pos.rank !== props.state.currTurn.KING_RANK) {\n            return false\n          }\n          if (move.isKingSide) {\n            return pos.file === 7 || pos.file === 6\n          } else {\n            return pos.file === 2 || pos.file === 0\n          }\n        }\n        return false\n      })\n      let onClick = () => {\n        props.changeHighlight && props.changeHighlight(undefined)\n        setPromotePos(null)\n      }\n      const move = moves[moveIndex]\n      if (highlightedPos && pos.compare(highlightedPos) === 0) {\n        // deselect on selecting the same piece twice\n      } else if (highlightedPos && props.makeMove && props.setup) {\n        const makeMove = props.makeMove\n        onClick = () => {\n          makeMove(props.state.modify(state => {\n            const piece = state.board.get(highlightedPos)\n            state.board = state.board.set(highlightedPos, EMPTY)\n            state.board = state.board.set(pos, piece)\n          }))\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n      } else if (props.setup && props.setup.setupPiece && props.makeMove) {\n        const makeMove = props.makeMove\n        const setupPiece = props.setup.setupPiece\n        onClick = () => {\n          makeMove(props.state.modify(state => {\n            state.board = state.board.set(pos, setupPiece)\n          }))\n          props.changeHighlight && props.changeHighlight(undefined)\n        }\n      } else if (moveIndex === -1 && piece.isOccupied()) {\n        onClick = () => {\n          props.changeHighlight && props.changeHighlight(pos)\n          setPromotePos(null)\n        }\n      } else if (moveIndex >= 0 && ((move.isNormal() && !move.isPromote()) || move.isCastle())) {\n        onClick = () => {\n          props.makeMove!(moves[moveIndex].do())\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n      } else if (moveIndex >= 0 && move.isNormal() && move.isPromote() && !promotePos) {\n        const promote = move\n        onClick = () => {\n          setPromotePos(promote.toPos)\n        }\n      }\n      let promoteMenu\n      if (drawPromotePos && pos.compare(drawPromotePos) === 0) {\n        const onPromote = (state: State) => {\n          props.makeMove!(state)\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n\n        function PromoteFilter (move: Move): move is Promotion {\n          if (!move.isNormal() || !promotePos || move.toPos.compare(promotePos) !== 0) {\n            return false\n          }\n          return move.isPromote()\n        }\n\n        const promoteList = immutable.List(moves.filter<Promotion>(PromoteFilter))\n\n        promoteMenu = <PromoteMenu moves={promoteList} onPromote={onPromote} theme={props.theme}/>\n      }\n      const canMoveTo = moveIndex >= 0 && !promotePos\n      squares.push(\n        <BoardSquare key={i * 8 + j} canMoveTo={canMoveTo} isBlack={isBlack} piece={piece} highlighted={highlighted}\n                     inCheck={inCheck} onClick={onClick} theme={props.theme}>\n          {promoteMenu}\n        </BoardSquare>\n      )\n    }\n  }\n  return (\n    <div className=\"Square\">\n      <div className=\"ChessBoard\">\n        {squares}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\ntype LabelledTextboxProps = React.InputHTMLAttributes<HTMLInputElement> & {label: string}\n\nexport default function LabelledTextBox (props: LabelledTextboxProps) {\n  const textboxProps: any = { ...props }\n  delete textboxProps.label\n  if (textboxProps.className) {\n    textboxProps.className += ' '\n  } else {\n    textboxProps.className = ''\n  }\n  textboxProps.className += 'LabelledTextboxTextbox'\n  return (\n    <div className='LabelledTextbox'>\n      <label>{props.label}</label>\n      <input {...textboxProps}/>\n    </div>\n  )\n}\n","import { getStartState, State, stateFromFen } from './logic/state'\nimport { History, Location } from 'history'\n\nexport function getStateFromQuery (history: History) {\n  const query = new URLSearchParams(history.location.search)\n  const rawState = query.get('fen')\n  if (rawState) {\n    try {\n      return stateFromFen(rawState)\n      // Ignore bad fen strings\n    } catch (e) {}\n  }\n  return getStartState()\n}\n\nexport function changeMode (history: History, location: Location, state: State, path: string, replace: boolean) {\n  const newLoc = { ...location }\n  const query = new URLSearchParams(newLoc.search)\n  const fen = state.toFen()\n  newLoc.pathname = path\n  if (fen === getStartState().toFen()) {\n    query.delete('fen')\n  } else {\n    query.set('fen', state.toFen())\n  }\n  newLoc.search = query.toString()\n  if (replace) {\n    history.replace(newLoc)\n  } else {\n    history.push(newLoc)\n  }\n}\n","import { getStartState, State, stateFromFen } from './logic/state'\nimport * as React from 'react'\nimport { BLACK, Piece, WHITE } from './logic/pieces'\nimport LabelledTextBox from './LabelledTextbox'\nimport { ChangeEvent, useState } from 'react'\nimport BoardSquare from './BoardSquare'\nimport { Pos } from './logic/util'\nimport { changeMode } from './util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ThemeManager } from './theme'\n\nexport interface SetupInfoProps {\n  state: State\n  changeState: (state: State) => void\n  selectedPiece?: Piece\n  selectPiece: (piece?: Piece) => void\n  theme: ThemeManager\n  openTheme: () => void\n}\n\nexport default function SetupInfo (props: SetupInfoProps) {\n  const [inputFen, setInputFen] = useState(() => props.state.toFen())\n  const [fenImportError, setImportError] = useState<string>()\n  const history = useHistory()\n  const location = useLocation()\n\n  let errorKey = 0\n  const errors: React.ReactElement[] = []\n  let hasError = false\n  function newError (condition: unknown, text: string | undefined | null) {\n    if (condition) {\n      hasError = true\n      errors.push(\n        <p className='ErrorText' key={errorKey}>\n          {text}\n        </p>\n      )\n    }\n    errorKey++\n  }\n  function onInputFenChange (event: ChangeEvent<HTMLInputElement>) {\n    setInputFen(event.target.value)\n  }\n  function onImportFen () {\n    try {\n      props.changeState(stateFromFen(inputFen))\n      setImportError(undefined)\n    } catch (e) {\n      setImportError(e.toString())\n    }\n  }\n  function onReset () {\n    props.changeState(getStartState())\n  }\n  function onClear () {\n    props.changeState(stateFromFen('8/8/8/8/8/8/8/8 w - - 0 1'))\n  }\n  function onToggleWhiteKingSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.white.kingSideCastle = event.target.checked }))\n  }\n  function onToggleWhiteQueenSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.white.queenSideCastle = event.target.checked }))\n  }\n  function onToggleBlackKingSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.black.kingSideCastle = event.target.checked }))\n  }\n  function onToggleBlackQueenSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.black.queenSideCastle = event.target.checked }))\n  }\n  function onChangeFirstMove (event: ChangeEvent<HTMLSelectElement>) {\n    let targetMove = WHITE\n    if (event.target.value === 'black') {\n      targetMove = BLACK\n    }\n    if (targetMove !== props.state.currTurn) {\n      props.changeState(props.state.flipTurn())\n    }\n  }\n  function onChangeEnPassantFile (event: ChangeEvent<HTMLSelectElement>) {\n    props.changeState(props.state.modify(newState => {\n      let enPassantRank = 5\n      if (newState.currTurn === BLACK) {\n        enPassantRank = 2\n      }\n      const enPassantPlayer = newState.getColor(newState.currTurn.OTHER_COLOR)\n      if (event.target.value) {\n        enPassantPlayer.enPassantPos = new Pos(Number(event.target.value), enPassantRank)\n      }\n    }))\n  }\n  function onPlay () {\n    changeMode(history, location, props.state, '/play', false)\n  }\n\n  newError(fenImportError, fenImportError)\n  newError(props.state.isCheckmate(), 'Setup state is mate')\n  newError(props.state.flipTurn().isCheck(), 'The king is captured')\n  const whiteKingCount = props.state.board.reduce((acc, piece) => acc + Number(piece === WHITE.KING), 0)\n  const blackKingCount = props.state.board.reduce((acc, piece) => acc + Number(piece === BLACK.KING), 0)\n  newError(whiteKingCount === 0, 'White needs a king')\n  newError(whiteKingCount > 1, 'White has more than one king')\n  newError(blackKingCount === 0, 'Black needs a king')\n  newError(blackKingCount > 1, 'Black has more than one king')\n  const backRankPawns = props.state.board.reduce((acc, piece, pos) => {\n    return acc + Number((pos.rank === 0 || pos.rank === 7) && (piece === WHITE.PAWN || piece === BLACK.PAWN))\n  }, 0)\n  newError(backRankPawns === 1, 'There is a pawn on the back rank')\n  newError(backRankPawns > 1, `There are ${backRankPawns} pawns on the back rank`)\n\n  function piecesToElement (piece: Piece, key: number): React.ReactElement {\n    function onClick () {\n      if (piece === props.selectedPiece) {\n        props.selectPiece()\n      } else {\n        props.selectPiece(piece)\n      }\n    }\n    const highlighted = piece === props.selectedPiece\n    return <BoardSquare key={key} piece={piece} highlighted={highlighted} onClick={onClick} theme={props.theme}/>\n  }\n\n  const blackPieces = [BLACK.PAWN, BLACK.KNIGHT, BLACK.BISHOP, BLACK.ROOK, BLACK.QUEEN, BLACK.KING].map(piecesToElement)\n  const whitePieces = [WHITE.PAWN, WHITE.KNIGHT, WHITE.BISHOP, WHITE.ROOK, WHITE.QUEEN, WHITE.KING].map(piecesToElement)\n\n  let selectedFirstMove = 'white'\n  if (props.state.currTurn === BLACK) {\n    selectedFirstMove = 'black'\n  }\n\n  let enPassantFile = ''\n  if (props.state.white.enPassantPos) {\n    enPassantFile = String(props.state.white.enPassantPos.file)\n  } else if (props.state.black.enPassantPos) {\n    enPassantFile = String(props.state.black.enPassantPos.file)\n  }\n\n  return (\n    <div className='SetupInfo'>\n      <div className='SetupErrorBox'>\n        {errors}\n      </div>\n      <div className='SetupPieceBox'>\n        {blackPieces}\n      </div>\n      <div className='SetupPieceBox'>\n        {whitePieces}\n      </div>\n      <LabelledTextBox value={props.state.toFen()} type='text' readOnly label='Current Fen:'/>\n      <LabelledTextBox label='Input Fen:' onChange={onInputFenChange} value={inputFen}/>\n      <div>\n        <label>First Move: </label>\n        <select value={selectedFirstMove} onChange={onChangeFirstMove}>\n          <option value='white'>White</option>\n          <option value='black'>Black</option>\n        </select>\n      </div>\n      <div>\n        <label>En-passant file: </label>\n        <select value={enPassantFile} onChange={onChangeEnPassantFile}>\n          <option value=''>-</option>\n          <option value='0'>a</option>\n          <option value='1'>b</option>\n          <option value='2'>c</option>\n          <option value='3'>d</option>\n          <option value='4'>e</option>\n          <option value='5'>f</option>\n          <option value='6'>g</option>\n          <option value='7'>h</option>\n        </select>\n      </div>\n      <div>\n        <label>White O-O: </label>\n        <input type='checkbox' checked={props.state.white.kingSideCastle} onChange={onToggleWhiteKingSideCastle}/>\n      </div>\n      <div>\n        <label>White O-O-O: </label>\n        <input type='checkbox' checked={props.state.white.queenSideCastle} onChange={onToggleWhiteQueenSideCastle}/>\n      </div>\n      <div>\n        <label>Black O-O: </label>\n        <input type='checkbox' checked={props.state.black.kingSideCastle} onChange={onToggleBlackKingSideCastle}/>\n      </div>\n      <div>\n        <label>Black O-O-O: </label>\n        <input type='checkbox' checked={props.state.black.queenSideCastle} onChange={onToggleBlackQueenSideCastle}/>\n      </div>\n      <div>\n        <button onClick={onImportFen}>Import Fen</button>\n        <button onClick={onReset}>Reset</button>\n        <button onClick={onClear}>Clear</button>\n      </div>\n      <button disabled={hasError} onClick={onPlay}>Play</button>\n      <button onClick={props.openTheme}>Change Theme</button>\n    </div>\n  )\n}\n","import { useState } from 'react'\nimport { State } from './logic/state'\nimport ChessBoard from './ChessBoard'\nimport SetupInfo from './SetupInfo'\nimport * as React from 'react'\nimport { Pos } from './logic/util'\nimport { EMPTY, Piece } from './logic/pieces'\nimport { changeMode, getStateFromQuery } from './util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ModeProps } from './App'\n\nexport default function SetupMode (props: ModeProps) {\n  const history = useHistory()\n  const [highlightedPos, setHighlightedPos] = useState<Pos>()\n  const [selectedPiece, setSelectedPiece] = useState<Piece>()\n  const state = getStateFromQuery(history)\n  const location = useLocation()\n\n  function setState (newState: State) {\n    changeMode(history, location, newState, '/setup', true)\n  }\n\n  const makeMove = (state: State) => setState(state)\n  function changeHighlight (pos?: Pos) {\n    setHighlightedPos(pos)\n    setSelectedPiece(undefined)\n  }\n  function selectPiece (piece?: Piece) {\n    if (highlightedPos) {\n      setState(state.modify(newState => {\n        newState.board = newState.board.set(highlightedPos, EMPTY)\n      }))\n    } else {\n      setSelectedPiece(piece)\n    }\n    setHighlightedPos(undefined)\n  }\n\n  const setup = { setupPiece: selectedPiece }\n  return (\n    <div className='App'>\n      <div className=\"PlayChessBoardBox\">\n        <ChessBoard changeHighlight={changeHighlight} highlightedPos={highlightedPos} state={state} setup={setup} makeMove={makeMove} theme={props.theme}/>\n      </div>\n      <SetupInfo changeState={makeMove} selectPiece={selectPiece} selectedPiece={selectedPiece} state={state} theme={props.theme} openTheme={props.openTheme}/>\n    </div>\n  )\n}\n","import { State } from './logic/state'\nimport { convertFileLetter, convertRankLetter, Pos } from './logic/util'\nimport { Piece } from './logic/pieces'\n\nexport abstract class Player {\n    abstract makeMove(state: State): Promise<State>\n    abstract name(): string\n\n    getBoardClick (): undefined | ((state: State) => void) {\n      return undefined\n    }\n\n    close (): void {}\n    newGame (): void {}\n}\n\nexport class Human extends Player {\n    promiseRes?: (state: State) => void\n\n    makeMove (state: State): Promise<State> {\n      return new Promise<State>(resolve => {\n        this.promiseRes = resolve\n      })\n    }\n\n    name () {\n      return 'Human'\n    }\n\n    getBoardClick (): ((state: State) => void) | undefined {\n      return this.promiseRes\n    }\n}\n\nexport class MrRandom extends Player {\n  timeoutID?: number\n\n  makeMove (state: State): Promise<State> {\n    const moves = state.moves().filter(move => !move.invalid())\n    const move = moves[Math.floor(Math.random() * moves.length)]\n    return new Promise<State>(resolve => {\n      this.timeoutID = window.setTimeout(() => resolve(move.do()), 100)\n    })\n  }\n\n  name () {\n    return 'MrRandom'\n  }\n\n  close () {\n    clearTimeout(this.timeoutID)\n  }\n}\n\nexport class Stockfish extends Player {\n  stockfishHandle?: Worker\n  state?: State\n  resolve?: (state: State) => void\n  level: number\n\n  constructor (level: number) {\n    super()\n    this.level = level\n    this.parseStockfishLine = this.parseStockfishLine.bind(this)\n  }\n\n  name () {\n    return 'Stockfish'\n  }\n\n  makeMove (state: State): Promise<State> {\n    return new Promise(resolve => {\n      this.state = state\n      if (!this.stockfishHandle) {\n        const wasmSupported = typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\n        this.stockfishHandle = new Worker(wasmSupported ? process.env.PUBLIC_URL + 'stockfish.js/stockfish.wasm.js' : process.env.PUBLIC_URL + 'stockfish.js/stockfish.js')\n        this.stockfishHandle.addEventListener('message', this.parseStockfishLine)\n        this.stockfishHandle.postMessage('uci')\n      } else {\n        this.giveStateToStockfish()\n      }\n      this.resolve = resolve\n    })\n  }\n\n  giveStateToStockfish () {\n    this.stockfishHandle!.postMessage(`position fen ${this.state?.toFen()}`)\n    this.stockfishHandle!.postMessage('go movetime 5000')\n  }\n\n  parseStockfishLine (event: MessageEvent<string>) {\n    const line = event.data\n    // console.log(line)\n    const command = line.split(/\\s+/).map(x => x.trim()).filter(x => x)\n    switch (command[0]) {\n      case 'uciok':\n        this.stockfishHandle!.postMessage(`setoption name Skill Level value ${this.level}`)\n        this.stockfishHandle!.postMessage('ucinewgame')\n        this.giveStateToStockfish()\n        break\n      case 'bestmove': {\n        const rawMove = command[1]\n        const fromPos = new Pos(convertFileLetter(rawMove[0]), convertRankLetter(rawMove[1]))\n        const toPos = new Pos(convertFileLetter(rawMove[2]), convertRankLetter(rawMove[3]))\n        let promoteChoice: Piece | undefined\n        if (rawMove[4]) {\n          promoteChoice = this.state!.currTurn.FROM_LETTER.get(rawMove[4].toUpperCase())\n        }\n        const moves = this.state!.moves().filter(x => {\n          if (x.isCastle() && fromPos.rank === this.state!.currTurn.KING_RANK && toPos.rank === fromPos.rank && fromPos.file === 4) {\n            if (x.isKingSide && toPos.file === 6) {\n              return true\n            } else if (!x.isKingSide && toPos.file === 2) {\n              return true\n            }\n          }\n          if (x.isNormal() && x.fromPos.compare(fromPos) === 0 && x.toPos.compare(toPos) === 0) {\n            if (x.isPromote()) {\n              return promoteChoice === x.promoteChoice\n            }\n            return true\n          }\n          return false\n        })\n        this.resolve!(moves[0].do())\n        break\n      }\n    }\n  }\n\n  close () {\n    if (this.stockfishHandle) {\n      this.stockfishHandle.terminate()\n    }\n  }\n}\n\nexport abstract class PlayerFactory {\n  abstract name (): string\n  abstract build (): Player\n  abstract id (): string\n  difficulty (): number | undefined {\n    return undefined\n  }\n\n  setDifficulty (x: number): PlayerFactory {\n    return this\n  }\n\n  minDifficulty (): number | undefined {\n    return undefined\n  }\n\n  maxDifficulty (): number | undefined {\n    return undefined\n  }\n}\n\nexport class HumanFactory extends PlayerFactory {\n  name (): string {\n    return 'Human'\n  }\n\n  build (): Player {\n    return new Human()\n  }\n\n  id (): string {\n    return 'human'\n  }\n}\n\nexport class RandomFactory extends PlayerFactory {\n  name (): string {\n    return 'Mr. Random'\n  }\n\n  build (): Player {\n    return new MrRandom()\n  }\n\n  id (): string {\n    return 'random'\n  }\n}\n\nexport class StockfishFactory extends PlayerFactory {\n  rawDifficulty: number\n\n  constructor (difficulty?: number) {\n    super()\n    this.rawDifficulty = difficulty || 0\n  }\n\n  difficulty (): number | undefined {\n    return this.rawDifficulty\n  }\n\n  minDifficulty (): number | undefined {\n    return 0\n  }\n\n  maxDifficulty (): number | undefined {\n    return 20\n  }\n\n  setDifficulty (x: number): PlayerFactory {\n    return new StockfishFactory(x)\n  }\n\n  name (): string {\n    return 'Stockfish'\n  }\n\n  build (): Player {\n    return new Stockfish(this.rawDifficulty)\n  }\n\n  id (): string {\n    return 'stockfish'\n  }\n}\n","import * as React from 'react'\nimport { HumanFactory, PlayerFactory, RandomFactory, StockfishFactory } from './player'\n\nexport interface PlayerSelectorProps {\n  value: PlayerFactory\n  onPlayerChange: (playerFactory: PlayerFactory) => void\n}\n\nexport default function PlayerSelector (props: PlayerSelectorProps) {\n  const onSelChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    let newSel\n    switch (event.target.value) {\n      case 'human':\n        newSel = new HumanFactory()\n        break\n      case 'random':\n        newSel = new RandomFactory()\n        break\n      case 'stockfish':\n        newSel = new StockfishFactory()\n        break\n      default:\n        return\n    }\n    props.onPlayerChange(newSel)\n  }\n\n  const onDiffChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newDiff = Number(event.target.value)\n    props.onPlayerChange(props.value.setDifficulty(newDiff))\n  }\n\n  let difficultySlider\n  if (props.value.difficulty() !== undefined) {\n    difficultySlider =\n      <>\n        <br/>\n        <label>{props.value.name()} Level: {props.value.difficulty()}</label>\n        <br/>\n        <input type='range' min={props.value.minDifficulty()} max={props.value.maxDifficulty()} onChange={onDiffChange} value={props.value.difficulty()}/>\n      </>\n  }\n\n  return (\n    <>\n      <select value={props.value.id()} onChange={onSelChange}>\n        <option value='human'>\n          Human\n        </option>\n        <option value='random'>\n          MrRandom\n        </option>\n        <option value='stockfish'>\n          Stockfish\n        </option>\n      </select>\n      {difficultySlider}\n    </>\n  )\n}\n","import { State } from './logic/state'\nimport { HumanFactory, Player, PlayerFactory } from './player'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport PlayerSelector from './PlayerSelector'\n\ninterface GameInfoProps {\n  state: State\n  restart: (white: Player, black: Player) => void\n  switchMode: () => void\n  openTheme: () => void\n}\n\nexport default function GameInfo (props: GameInfoProps) {\n  const [whiteFactory, setWhiteFactory] = useState<PlayerFactory>(new HumanFactory())\n  const [blackFactory, setBlackFactory] = useState<PlayerFactory>(new HumanFactory())\n\n  const restartButton = () => {\n    props.restart(whiteFactory.build(), blackFactory.build())\n  }\n\n  const onWhiteChange = (player: PlayerFactory) => {\n    setWhiteFactory(player)\n  }\n\n  const onBlackChange = (player: PlayerFactory) => {\n    setBlackFactory(player)\n  }\n\n  let checkmateText\n  if (props.state.isCheckmate()) {\n    checkmateText = 'Checkmate'\n  } else if (props.state.isDraw()) {\n    checkmateText = `Draw due to ${props.state.drawReason()}`\n  }\n  return (\n    <div className='GameInfo'>\n      {checkmateText}\n      <br/>\n      <label>White Player </label>\n      <PlayerSelector onPlayerChange={onWhiteChange} value={whiteFactory}/>\n      <br/>\n      <label>Black Player </label>\n      <PlayerSelector onPlayerChange={onBlackChange} value={blackFactory}/>\n      <br/>\n      <button onClick={restartButton}>Restart</button>\n      <button onClick={props.switchMode}>Setup</button>\n      <button onClick={props.openTheme}>Change Theme</button>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { Human, Player } from './player'\nimport { State } from './logic/state'\nimport { BLACK } from './logic/pieces'\nimport ChessBoard from './ChessBoard'\nimport GameInfo from './GameInfo'\nimport { Pos } from './logic/util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { changeMode, getStateFromQuery } from './util'\nimport { ModeProps } from './App'\n\ninterface Players {\n  white: Player\n  black: Player\n}\n\nexport default function PlayMode (props: ModeProps) {\n  const history = useHistory()\n  const location = useLocation()\n  const [players, setPlayers] = useState<Players>({ white: new Human(), black: new Human() })\n\n  const [state, setState] = useState(() => getStateFromQuery(history))\n  const [highlightedPos, setHighlightedPos] = useState<Pos>()\n\n  useEffect(() => {\n    // If someone pushes the reset button at the exact time a move is ready,\n    // then the board will be corrupted with the move that have been be canceled.\n    // This variable blocks the board from updating in the promise handler,\n    // preventing this race condition.\n    const defaultState = getStateFromQuery(history)\n    let stateValid = true\n    let player1 = players.white\n    let player2 = players.black\n    if (defaultState.currTurn === BLACK) {\n      const tmp = player1\n      player1 = player2\n      player2 = tmp\n    }\n    const makeMoveThen = (state: State): Promise<unknown> | undefined => {\n      if (!stateValid) {\n        return\n      }\n      if (state.isGameOver()) {\n        setState(state)\n        return\n      }\n      const tmp = player1\n      player1 = player2\n      player2 = tmp\n      const ret = player1.makeMove(state).then(makeMoveThen)\n      setState(state)\n      return ret\n    }\n    player1.makeMove(defaultState).then(makeMoveThen)\n    setState(defaultState)\n    return () => {\n      stateValid = false\n      players.white.close()\n      players.black.close()\n    }\n  }, [players])\n\n  const restart = (white: Player, black: Player) => {\n    setPlayers({ white, black })\n  }\n\n  const switchMode = () => {\n    changeMode(history, location, state, '/setup', false)\n  }\n\n  let currPlayer = players.white\n  if (state.currTurn === BLACK) {\n    currPlayer = players.black\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"PlayChessBoardBox\">\n        <ChessBoard changeHighlight={setHighlightedPos} highlightedPos={highlightedPos} makeMove={currPlayer.getBoardClick()} state={state} theme={props.theme}/>\n      </div>\n      <GameInfo state={state} restart={restart} switchMode={switchMode} openTheme={props.openTheme}/>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport DEFAULT_THEME from './defaultTheme.json'\nimport assert from 'assert'\n\nexport interface BoardSquareTheme {\n  name: string,\n  id: string,\n  // Must be an css color\n  blackColor: string,\n  whiteColor: string,\n}\n\nexport interface PieceTheme {\n  prefix: string,\n  name: string,\n}\n\nexport interface Theme {\n  piece: PieceTheme\n  boardSquare: BoardSquareTheme,\n}\n\nlet CLASSNAME_SUFFIX = 0\n\nexport class ThemeManager {\n  readonly theme: Readonly<Theme>\n  readonly className: string\n\n  readonly style = document.createElement('style')\n\n  constructor (theme?: Theme) {\n    if (!theme) {\n      theme = DEFAULT_THEME\n    }\n    this.theme = { ...theme }\n    this.className = `ChessTheme-${CLASSNAME_SUFFIX}`\n    CLASSNAME_SUFFIX++\n    assert(/^[0-9a-zA-Z#]+$/.test(this.theme.boardSquare.whiteColor), 'Attempted xss')\n    assert(/^[0-9a-zA-Z#]+$/.test(this.theme.boardSquare.blackColor), 'Attempted xss')\n    this.style.textContent = `\n      .ChessBoardSquareWhite.${this.className} {\n        background-color: ${this.theme.boardSquare.whiteColor};\n      }\n\n      .ChessBoardSquareBlack.${this.className} {\n       background-color: ${this.theme.boardSquare.blackColor};\n      }\n    `\n  }\n}\n\nexport function useTheme (defaultTheme?: Theme): [ThemeManager, (theme: Theme) => void] {\n  const [theme, setTheme] = useState(new ThemeManager(defaultTheme))\n  useEffect(() => {\n    document.head.append(theme.style)\n    return () => {\n      theme.style.remove()\n    }\n  })\n\n  return [theme, theme => {\n    setTheme(new ThemeManager(theme))\n  }]\n}\n","import { Theme, ThemeManager, useTheme } from './theme'\nimport React, { ChangeEvent, useEffect, useRef, useState } from 'react'\nimport BOARD_THEMES from './boardThemes.json'\nimport PIECE_THEMES from './pieceThemes.json'\nimport ChessBoard from './ChessBoard'\nimport { getStartState } from './logic/state'\n\nexport interface ThemeSetupProps {\n  theme: ThemeManager\n  setTheme: (theme: Theme) => void\n}\n\nexport default function ThemeSetup (props: ThemeSetupProps) {\n  const [theme, setTheme] = useTheme(props.theme.theme)\n  const [boardWidth, setBoardWidth] = useState(0)\n  const boardRef = useRef<HTMLDivElement | null>(null)\n  useEffect(() => {\n    function onResize () {\n      measureBoardWidth(boardRef.current)\n    }\n\n    window.addEventListener('resize', onResize)\n    return () => {\n      window.removeEventListener('resize', onResize)\n    }\n  })\n\n  const boardThemes = []\n  for (const theme of BOARD_THEMES) {\n    boardThemes.push(<option value={theme.id} key={theme.id}>{theme.name}</option>)\n  }\n\n  const pieceThemes = []\n  for (const theme of PIECE_THEMES) {\n    pieceThemes.push(<option value={theme.prefix} key={theme.prefix}>{theme.name}</option>)\n  }\n\n  function onChangeBoardTheme (event: ChangeEvent<HTMLSelectElement>) {\n    const boardTheme = BOARD_THEMES.find(theme => theme.id === event.target.value)!\n    const newTheme = { ...theme.theme }\n    newTheme.boardSquare = { ...boardTheme }\n    setTheme(newTheme)\n  }\n\n  function onChangePieceTheme (event: ChangeEvent<HTMLSelectElement>) {\n    const pieceTheme = PIECE_THEMES.find(theme => theme.prefix === event.target.value)!\n    const newTheme = { ...theme.theme }\n    newTheme.piece = { ...pieceTheme }\n    setTheme(newTheme)\n  }\n\n  function onConfirm () {\n    props.setTheme(theme.theme)\n  }\n\n  function onCancel () {\n    props.setTheme(props.theme.theme)\n  }\n\n  function measureBoardWidth (board: HTMLDivElement | null | undefined) {\n    if (board) {\n      setBoardWidth(board.offsetHeight)\n      boardRef.current = board\n    } else {\n      boardRef.current = null\n    }\n  }\n\n  return (\n    <div className='Window'>\n      <div className='WindowCover' onClick={onCancel}/>\n      <div className='WindowContents'>\n        <h1>Theme Setup</h1>\n        <label>Board Theme:</label>\n        <select onChange={onChangeBoardTheme} value={theme.theme.boardSquare.id}>\n          {boardThemes}\n        </select>\n        <label>Piece Theme:</label>\n        <select onChange={onChangePieceTheme} value={theme.theme.piece.prefix}>\n          {pieceThemes}\n        </select>\n        <div ref={measureBoardWidth} className='WindowChessBoardSizer'>\n          <div className=\"WindowChessBoard\" style={{ width: boardWidth - 16 }}>\n            <ChessBoard state={getStartState()} theme={theme}/>\n          </div>\n        </div>\n        <button onClick={onConfirm}>Confirm</button>\n        <button onClick={onCancel}>Cancel</button>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport './App.css'\nimport SetupMode from './SetupMode'\nimport PlayMode from './PlayMode'\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport { Theme, ThemeManager, useTheme } from './theme'\nimport { useState } from 'react'\nimport ThemeSetup from './ThemeSetup'\n\nexport interface ModeProps {\n  theme: ThemeManager\n  openTheme: () => void\n}\n\nfunction App (_props: {}) {\n  const [theme, setTheme] = useTheme()\n  const [themeOpen, setThemeOpen] = useState(false)\n\n  function onSetTheme (theme: Theme) {\n    setTheme(theme)\n    setThemeOpen(false)\n  }\n\n  function openTheme () {\n    setThemeOpen(true)\n  }\n\n  let themeSetup\n  if (themeOpen) {\n    themeSetup = <ThemeSetup theme={theme} setTheme={onSetTheme}/>\n  }\n\n  return (\n    <>\n      {themeSetup}\n      <BrowserRouter>\n        <Switch>\n          <Redirect exact from={process.env.PUBLIC_URL + '/'} to={process.env.PUBLIC_URL + '/play'}/>\n          <Route path={process.env.PUBLIC_URL + '/play'}>\n            <PlayMode theme={theme} openTheme={openTheme}/>\n          </Route>\n          <Route path={process.env.PUBLIC_URL + '/setup'}>\n            <SetupMode theme={theme} openTheme={openTheme}/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </>\n  )\n}\n\nexport default App\n","import { stateFromFen } from './logic/state';\n\n(window as any).YACHESS_DEBUG = {\n  perft: (fen: string, depth: number): string => {\n    let output = ''\n    if (!Number.isInteger(depth) || depth < 1) {\n      throw new Error('Invalid depth')\n    }\n\n    const state = stateFromFen(fen)\n    const moves = state.moves().filter(x => !x.invalid())\n    let nodeTotal = 0\n    for (const move of moves) {\n      const nodes = move.do().perft(depth - 1)\n      nodeTotal += nodes\n      output += `${move.toNotation().toString()} has ${nodes} nodes\\n`\n    }\n    output += `There are ${nodeTotal} nodes in total`\n\n    return output\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport './debug'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}