{"version":3,"sources":["logic/util.ts","logic/move_notation.ts","logic/moves.ts","logic/state.ts","logic/pieces.ts","BoardSquare.tsx","PromoteMenu.tsx","useResizeEffect.ts","ChessBoard.tsx","LabelledTextbox.tsx","util.ts","SetupInfo.tsx","SetupMode.tsx","player.ts","PlayerSelector.tsx","MoveHistory.tsx","GameInfo.tsx","PlayMode.tsx","theme.ts","ThemeSetup.tsx","App.tsx","debug.ts","index.tsx"],"names":["convertFileLetter","letter","toLowerCase","charCodeAt","convertRankLetter","Number","Pos","file","rank","this","isInteger","Error","newFile","newRank","add","String","fromCharCode","other","fileCompare","raw","Math","floor","PgnMoveLineGen","currMoveStr","totalMoveStr","token","tmpMoveStr","length","NORMAL_MOVE_REGEX","MoveNotation","checkSymbol","matches","color","move","trim","CastleMoveNotation","parsedMove","exec","pieceLetter","piece","FROM_LETTER","get","fromFileLetter","fromFile","util","fromRankLetter","fromRank","captures","toFile","toRank","toPos","promoteLetter","promoteChoice","NormalMoveNotation","isKingSide","isCastle","captureLetter","fromRankDigit","promoteStr","getPGNLetter","toString","state","currTurn","PAWN","isNormal","board","canBeCaptured","isEnPassant","isPromote","fromPos","compare","Move","toNotation","flipTurn","modify","newState","doChain","isHistory","moveHistory","setSize","moveIndex","halfMove","push","lastFen","toAbvFen","stateCount","threeFoldDetect","set","NormalMove","notationCache","isOccupied","notation","moveNotation","isCapture","possibleMoves","moves","filter","x","invalid","doneMove","do","isCheckmate","isCheck","KING","isProtected","checks","isPinned","deltaFile","deltaRank","abs","pinnedAxis","getPinnedAxis","sign","pieces","immmutable","FirstPawn","getColor","enPassantPos","addRank","PAWN_RANK_DIR","EnPassant","passedPawn","assert","Promotion","Castle","myRook","ROOK","myKing","myRank","KING_RANK","withMutations","myColor","betweenRookKing","kingSideCastle","queenSideCastle","pos","badPos","some","Player","arg1","Board","mutable","toRaw","KNIGHT","BISHOP","QUEEN","rawValue","id","rawSet","newRaw","Uint8Array","axis","pinned","attacked","fun","acc","i","fromRaw","fn","State","white","black","historyBegin","resign","agreeDraw","STARTING_BOARD","getStartingBoard","immutable","size","halfMoveCount","fen","emptyRun","fenLetter","moveCount","lastFenLst","toFen","split","pop","join","asMutable","enPassantPossible","OTHER_COLOR","PAWN_RANK","enPassantPiecePos","enPassPos","tmpState","leftDiag","addFile","leftPawnPinned","rightDiag","rightPawnPinned","clearFlags","protects","prot","setProtected","setPinned","pin","moveList","concat","isThreeFold","isDraw","Object","freeze","HistoryState","last","undefined","depth","nodes","perft","gameStartTime","eventName","siteName","round","whiteName","blackName","date","getFullYear","getMonth","getDate","exportState","endAltHistory","end","result","isGameOver","pgnTags","beginState","begin","getStartState","outputStr","tag","moveLineGen","addToken","done","lastState","back","forward","history","forwardState","AltHistoryState","altBranch","START_STATE","FEN_REGEX","stateFromFen","parsedFen","rawBoard","rawRow","char","asNum","currPlayer","includes","enPassantPlayer","ConstructorKey","Square","_key","canMoveOnto","EmptySquare","_other","moveLine","line","protectLine","targetPiece","applyCheckPinFlag","checkForKing","pinLine","setPinnedAxis","Piece","key","Pawn","PROMOTE_LIST","choice","myPos","forwardMove","forwardOccupied","addMove","firstMove","console","otherColor","Rook","map","reduce","val","forEach","Knight","deltaPos","newPos","Bishop","Queen","prototype","call","King","genColor","kingRank","pawnRank","pawnRankDir","fenConv","idOffset","ret","assign","fromLetter","WRITABLE_WHITE","WRITABLE_BLACK","WHITE","BLACK","FROM_FEN_ARRAY","FROM_FEN","EMPTY","getPieceImage","theme","name","getPieceName","alt","className","src","process","prefix","BoardSquare","props","highlight","checkHighlight","isBlack","highlighted","inCheck","moveIndicator","pieceImage","canMoveTo","r","cx","cy","fill","stroke","strokeWidth","onClick","children","PromoteMenu","promotes","onPromote","RESIZE_HANDLERS","Map","useResizeEffect","handler","resizeKey","useState","Symbol","useEffect","delete","ChessBoard","promotePos","setPromotePos","boardSize","setBoardSize","boardRef","useRef","measureBoardSize","newBoardSize","min","offsetHeight","offsetWidth","current","highlightedPos","changeHighlight","setup","setupPiece","squares","drawPromotePos","flipBoard","makeMove","moveFilter","initRank","rankStep","initFile","fileStep","j","Boolean","findIndex","promote","promoteMenu","promoteList","ref","style","height","width","window","addEventListener","values","LabelledTextBox","textboxProps","label","getStateFromQuery","rawState","URLSearchParams","location","search","e","changeMode","path","replace","newLoc","query","pathname","SetupInfo","inputFen","setInputFen","fenImportError","setImportError","useHistory","useLocation","errorKey","errors","hasError","newError","condition","text","whiteKingCount","blackKingCount","backRankPawns","piecesToElement","selectedPiece","selectPiece","blackPieces","whitePieces","selectedFirstMove","enPassantFile","value","type","readOnly","onChange","event","target","targetMove","changeState","enPassantRank","checked","disabled","openTheme","SetupMode","setHighlightedPos","setSelectedPiece","setState","Human","promiseRes","Promise","resolve","MrRandom","timeoutID","random","setTimeout","clearTimeout","Stockfish","level","stockfishHandle","parseStockfishLine","bind","giveStateToStockfish","wasmSupported","WebAssembly","validate","of","Worker","postMessage","command","data","rawMove","toUpperCase","terminate","PlayerFactory","HumanFactory","RandomFactory","StockfishFactory","difficulty","rawDifficulty","PlayerSelector","difficultySlider","minDifficulty","max","maxDifficulty","newDiff","onPlayerChange","setDifficulty","newSel","autoScroll","div","scrollIntoView","MoveHistory","GameInfo","checkmateText","whiteFactory","setWhiteFactory","blackFactory","setBlackFactory","drawReason","player","restart","build","switchMode","PlayMode","players","setPlayers","setFlipBoard","defaultState","stateValid","player1","player2","tmp","then","makeMoveThen","close","getBoardClick","CLASSNAME_SUFFIX","ThemeManager","document","createElement","DEFAULT_THEME","test","boardSquare","whiteColor","blackColor","textContent","useTheme","defaultTheme","setTheme","head","append","remove","ThemeSetup","windowHeight","setWindowHeight","windowWidth","setWindowWidth","resizeWindow","body","boardThemes","BOARD_THEMES","pieceThemes","PIECE_THEMES","onCancel","boardTheme","find","newTheme","pieceTheme","App","_props","themeSetup","themeOpen","setThemeOpen","exact","from","to","YACHESS_DEBUG","output","nodeTotal","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7df7d20b.chunk.js","sourcesContent":["function convertFileLetter (letter: string) {\n  const charCode = letter.toLowerCase().charCodeAt(0)\n  return charCode - 'a'.charCodeAt(0)\n}\n\nfunction convertRankLetter (letter: string) {\n  return Number(letter) - 1\n}\n\nclass Pos {\n  file: number;\n  rank: number;\n\n  constructor (file: number, rank: number) {\n    this.file = file\n    this.rank = rank\n\n    if (!Number.isInteger(rank) || !Number.isInteger(file) || rank < 0 || rank > 7 || file < 0 || file > 7) {\n      throw new Error('Invalid board pos')\n    }\n    // Object.freeze(this)\n  }\n\n  // Returns null on out of bounds\n  add (file: number, rank: number) {\n    const newFile = this.file + file\n    const newRank = this.rank + rank\n    if (newFile < 0 || newFile > 7 || newRank < 0 || newRank > 7) {\n      return null\n    }\n    return new Pos(newFile, newRank)\n  }\n\n  addFile (file: number) {\n    return this.add(file, 0)\n  }\n\n  addRank (rank: number) {\n    return this.add(0, rank)\n  }\n\n  toRaw () {\n    return this.rank * 8 + this.file\n  }\n\n  static fromRaw (raw: number): Pos {\n    const rank = Math.floor(raw / 8)\n    const file = raw % 8\n    return new Pos(file, rank)\n  }\n\n  toString () {\n    const fileLetter = String.fromCharCode(this.file + 'a'.charCodeAt(0))\n    const rankLetter = String(this.rank + 1)\n    return fileLetter + rankLetter\n  }\n\n  compare (other: Pos) {\n    const fileCompare = this.file - other.file\n    if (fileCompare !== 0) {\n      return fileCompare\n    }\n    return this.rank - other.rank\n  }\n}\n\nclass PgnMoveLineGen {\n  currMoveStr: string;\n  totalMoveStr: string;\n\n  constructor () {\n    this.currMoveStr = ''\n    this.totalMoveStr = ''\n  }\n\n  addToken (token: string) {\n    if (this.currMoveStr === '') {\n      this.currMoveStr = token\n    } else {\n      const tmpMoveStr = this.currMoveStr + ' ' + token\n      if (tmpMoveStr.length > 80) {\n        this.totalMoveStr += '\\n' + this.currMoveStr\n        this.currMoveStr = token\n      } else {\n        this.currMoveStr = tmpMoveStr\n      }\n    }\n  }\n\n  done () {\n    return this.totalMoveStr + '\\n' + this.currMoveStr\n  }\n}\n\nexport {\n  convertFileLetter,\n  convertRankLetter,\n  Pos,\n  PgnMoveLineGen\n}\n","import * as util from './util'\nimport * as moves from './moves'\nimport * as pieces from './pieces'\n\nconst NORMAL_MOVE_REGEX = /^([KQRBN]?)([a-h]?)([1-8]?)(x?)([a-h])([1-8])(?:=?([QRBN]))?(?:\\+|#|)(?:\\?\\??|!!?|\\?!|!\\?|)$/\n\nabstract class MoveNotation {\n  checkSymbol: string\n\n  protected constructor () {\n    if (typeof this.matches !== 'function') {\n      throw new Error('Matches function not defined')\n    }\n    this.checkSymbol = ''\n  }\n\n  static parseMove (color: pieces.Color, move: string) {\n    move = move.trim()\n    if (move === 'O-O' || move === '0-0') {\n      return new CastleMoveNotation(true)\n    }\n    if (move === 'O-O-O' || move === '0-0-0') {\n      return new CastleMoveNotation(false)\n    }\n    const parsedMove = NORMAL_MOVE_REGEX.exec(move)\n    if (!parsedMove) {\n      return null\n    }\n\n    const pieceLetter = parsedMove[1]\n    const piece = color.FROM_LETTER.get(pieceLetter)!\n    const fromFileLetter = parsedMove[2]\n    const fromFile = fromFileLetter ? util.convertFileLetter(fromFileLetter) : null\n    const fromRankLetter = parsedMove[3]\n    const fromRank = fromRankLetter ? util.convertRankLetter(fromRankLetter) : null\n    const captures = parsedMove[4] === 'x'\n    const toFile = util.convertFileLetter(parsedMove[5])\n    const toRank = util.convertRankLetter(parsedMove[6])\n    const toPos = new util.Pos(toFile, toRank)\n    const promoteLetter = parsedMove[7]\n    let promoteChoice = null\n    if (promoteLetter) {\n      promoteChoice = color.FROM_LETTER.get(promoteLetter)!\n    }\n    return new NormalMoveNotation(piece, captures, fromFile, fromRank, toPos, promoteChoice)\n  }\n\n  abstract matches (move: moves.Move): boolean\n}\n\nclass CastleMoveNotation extends MoveNotation {\n  isKingSide: boolean\n\n  constructor (isKingSide: boolean) {\n    super()\n    this.isKingSide = isKingSide\n  }\n\n  toString () {\n    if (this.isKingSide) {\n      return 'O-O' + this.checkSymbol\n    } else {\n      return 'O-O-O' + this.checkSymbol\n    }\n  }\n\n  matches (move: moves.Move): boolean {\n    return move.isCastle() && this.isKingSide === move.isKingSide\n  }\n}\n\nclass NormalMoveNotation extends MoveNotation {\n  piece: pieces.Piece\n  captures: boolean\n  fromFile: number | null\n  fromRank: number | null\n  toPos: util.Pos\n  promoteChoice: pieces.Piece | null\n\n  constructor (piece: pieces.Piece, captures: boolean, fromFile: number | null, fromRank: number | null, toPos: util.Pos, promoteChoice: pieces.Piece | null) {\n    super()\n    this.piece = piece\n    this.captures = captures\n    this.fromFile = fromFile\n    this.fromRank = fromRank\n    this.toPos = toPos\n    this.promoteChoice = promoteChoice\n  }\n\n  toString () {\n    let captureLetter = ''\n    if (this.captures) {\n      captureLetter = 'x'\n    }\n    let fromFileLetter = ''\n    if (this.fromFile !== null) {\n      fromFileLetter = String.fromCharCode(this.fromFile + 'a'.charCodeAt(0))\n    }\n    let fromRankDigit = ''\n    if (this.fromRank !== null) {\n      fromRankDigit = String(this.fromRank + 1)\n    }\n    let promoteStr = ''\n    if (this.promoteChoice) {\n      promoteStr += '=' + this.promoteChoice.getPGNLetter()\n    }\n    return this.piece.getPGNLetter() + fromFileLetter + fromRankDigit + captureLetter + this.toPos.toString() + promoteStr + this.checkSymbol\n  }\n\n  matches (move: moves.Move): boolean {\n    // Promotes are only valid for pawns\n    if (this.piece !== move.state.currTurn.PAWN && this.promoteChoice) {\n      return false\n    }\n    if (!move.isNormal()) {\n      return false\n    }\n    // Be permissive in allowing a capture when not specified but require that a move like Qxe6 is a capture\n    if (this.captures && !(move.state.board.get(this.toPos).canBeCaptured(move.piece) || move.isEnPassant())) {\n      return false\n    }\n    if (move.isPromote() && this.promoteChoice !== move.promoteChoice) {\n      return false\n    }\n    if (!move.isPromote() && this.promoteChoice) {\n      return false\n    }\n    return move.piece === this.piece &&\n            (this.fromFile === null || this.fromFile === move.fromPos.file) &&\n            (this.fromRank === null || this.fromRank === move.fromPos.rank) &&\n            move.toPos.compare(this.toPos) === 0\n  }\n}\n\nexport { CastleMoveNotation, MoveNotation, NormalMoveNotation }\n","import * as pieces from './pieces'\nimport * as util from './util'\nimport * as moveNotation from './move_notation'\nimport * as state from './state'\nimport * as immmutable from 'immutable'\nimport { State } from './state'\nimport assert from 'assert'\n\nabstract class Move {\n  state: state.State\n\n  protected constructor (state: state.State) {\n    this.state = state\n    if (typeof this.toNotation !== 'function') {\n      throw new Error('To notation function not defined')\n    }\n  }\n\n  isNormal (): this is NormalMove {\n    return false\n  }\n\n  isCastle (): this is Castle {\n    return false\n  }\n\n  isEnPassant (): this is EnPassant {\n    return false\n  }\n\n  do () {\n    return this.state.flipTurn().modify(newState => this.doChain(newState))\n  }\n\n  protected doChain (state: State) {\n    if (state.isHistory()) {\n      state.moveHistory = state.moveHistory.setSize(state.moveIndex)\n      state.moveIndex++\n    }\n    state.halfMove++\n    state.moveHistory = state.moveHistory.push(this)\n    const lastFen = this.state.toAbvFen()\n    let stateCount = state.threeFoldDetect.get(lastFen)\n    if (!stateCount) {\n      stateCount = 0\n    }\n    stateCount++\n    state.threeFoldDetect = state.threeFoldDetect.set(lastFen, stateCount)\n  }\n\n  toString () {\n    return this.toNotation().toString()\n  }\n\n  abstract invalid (): string | false\n\n  abstract toNotation(): moveNotation.MoveNotation\n}\n\nclass NormalMove extends Move {\n  piece: pieces.Piece\n  fromPos: util.Pos\n  toPos: util.Pos\n  private notationCache?: moveNotation.MoveNotation\n\n  constructor (state: state.State, piece: pieces.Piece, fromPos: util.Pos, toPos: util.Pos) {\n    super(state)\n    this.piece = piece\n    this.fromPos = fromPos\n    this.toPos = toPos\n  }\n\n  isNormal () {\n    return true\n  }\n\n  isPromote (): this is Promotion {\n    return false\n  }\n\n  isCapture () {\n    return this.state.board.get(this.toPos).isOccupied()\n  }\n\n  toNotation () {\n    if (this.notationCache) {\n      return this.notationCache\n    }\n    let promoteChoice = null\n    if (this.isPromote()) {\n      promoteChoice = this.promoteChoice\n    }\n    const notation = new moveNotation.NormalMoveNotation(this.piece, this.isCapture(), null, null, this.toPos, promoteChoice)\n    let possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n    if (possibleMoves.length > 1 || (this.isCapture() && this.piece === this.piece.color.PAWN)) {\n      notation.fromFile = this.fromPos.file\n      possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n      if (possibleMoves.length > 1) {\n        notation.fromFile = null\n        notation.fromRank = this.fromPos.rank\n        possibleMoves = this.state.moves().filter(x => notation.matches(x) && !x.invalid())\n        if (possibleMoves.length > 1) {\n          notation.fromFile = this.fromPos.file\n          notation.fromRank = this.fromPos.rank\n        }\n      }\n    }\n    const doneMove = this.do()\n    if (doneMove.isCheckmate()) {\n      notation.checkSymbol = '#'\n    } else if (doneMove.isCheck()) {\n      notation.checkSymbol = '+'\n    }\n    this.notationCache = notation\n    return notation\n  }\n\n  invalid (): string | false {\n    if (this.piece === this.state.currTurn.KING) {\n      if (this.state.board.isProtected(this.toPos)) {\n        return 'Check'\n      }\n      return false\n    } else {\n      // In double check only the king is allowed to move\n      if (this.state.checks > 1) {\n        return 'Check'\n      }\n      if (this.state.board.isPinned(this.fromPos)) {\n        const deltaFile = this.fromPos.file - this.toPos.file\n        const deltaRank = this.fromPos.rank - this.toPos.rank\n        const knightMove = deltaFile !== 0 && deltaRank !== 0 && Math.abs(deltaFile) !== Math.abs(deltaRank)\n        if (knightMove) {\n          return 'Check'\n        }\n        const pinnedAxis = this.state.board.getPinnedAxis(this.fromPos)\n        if (deltaFile === 0 && pinnedAxis !== 0) {\n          return 'Check'\n        }\n        if (deltaRank === 0 && pinnedAxis !== 1) {\n          return 'Check'\n        }\n        if (deltaFile !== 0 && deltaRank !== 0) {\n          if (Math.sign(deltaRank) !== Math.sign(deltaFile) && pinnedAxis !== 2) {\n            return 'Check'\n          }\n          if (Math.sign(deltaRank) === Math.sign(deltaFile) && pinnedAxis !== 3) {\n            return 'Check'\n          }\n        }\n      }\n\n      // Piece must block check or capture checking piece\n      if (this.state.checks === 1 && !this.state.board.isPinned(this.toPos)) {\n        return 'Check'\n      }\n      return false\n    }\n  }\n\n  protected doChain (state: State) {\n    super.doChain(state)\n    state.board = state.board.set(this.fromPos, pieces.EMPTY)\n    state.board = state.board.set(this.toPos, this.piece)\n    if (this.state.board.get(this.toPos).isOccupied() || this.piece === this.state.currTurn.PAWN) {\n      state.halfMove = 0\n      state.threeFoldDetect = immmutable.Map()\n    }\n  }\n}\n\nclass FirstPawn extends NormalMove {\n  protected doChain (state: State) {\n    super.doChain(state)\n    const myColor = state.getColor(this.piece.color)\n    myColor.enPassantPos = this.fromPos.addRank(this.piece.color.PAWN_RANK_DIR)\n  }\n}\n\nclass EnPassant extends NormalMove {\n  isEnPassant () {\n    return true\n  }\n\n  isCapture () {\n    return true\n  }\n\n  protected doChain (state: State) {\n    super.doChain(state)\n    const passedPawn = this.toPos.addRank(-this.piece.color.PAWN_RANK_DIR)\n    assert(passedPawn)\n\n    state.board = state.board.set(passedPawn, pieces.EMPTY)\n  }\n}\n\nclass Promotion extends NormalMove {\n  promoteChoice: pieces.Piece\n\n  constructor (state: state.State, piece: pieces.Piece, fromPos: util.Pos, toPos: util.Pos, promoteChoice: pieces.Piece) {\n    super(state, piece, fromPos, toPos)\n    this.promoteChoice = promoteChoice\n  }\n\n  isPromote () {\n    return true\n  }\n\n  doChain (state: State) {\n    super.doChain(state)\n    state.board = state.board.set(this.toPos, this.promoteChoice)\n  }\n}\n\nclass Castle extends Move {\n  isKingSide: boolean\n\n  constructor (state: state.State, isKingSide: boolean) {\n    super(state)\n    this.isKingSide = isKingSide\n  }\n\n  toNotation () {\n    const notation = new moveNotation.CastleMoveNotation(this.isKingSide)\n    const doneMove = this.do()\n    if (doneMove.isCheckmate()) {\n      notation.checkSymbol = '#'\n    } else if (doneMove.isCheck()) {\n      notation.checkSymbol = '+'\n    }\n    return notation\n  }\n\n  isCastle () {\n    return true\n  }\n\n  doChain (state: State) {\n    super.doChain(state)\n    const myRook = this.state.currTurn.ROOK\n    const myKing = this.state.currTurn.KING\n    const myRank = this.state.currTurn.KING_RANK\n\n    state.board = state.board.withMutations(board => {\n      board.set(new util.Pos(4, myRank), pieces.EMPTY)\n      if (this.isKingSide) {\n        board.set(new util.Pos(5, myRank), myRook)\n        board.set(new util.Pos(6, myRank), myKing)\n        board.set(new util.Pos(7, myRank), pieces.EMPTY)\n      } else {\n        board.set(new util.Pos(3, myRank), myRook)\n        board.set(new util.Pos(2, myRank), myKing)\n        board.set(new util.Pos(0, myRank), pieces.EMPTY)\n      }\n    })\n  }\n\n  invalid () {\n    if (this.state.isCheck()) {\n      return \"Can't castle out of check\"\n    }\n\n    const myColor = this.state.getColor(this.state.currTurn)\n    const myRank = this.state.currTurn.KING_RANK\n\n    const betweenRookKing = []\n    if (this.isKingSide) {\n      if (!myColor.kingSideCastle) {\n        return \"Can't castle on king side\"\n      }\n\n      betweenRookKing.push(new util.Pos(5, myRank), new util.Pos(6, myRank))\n    } else {\n      if (!myColor.queenSideCastle) {\n        return \"Can't castle on queen side\"\n      }\n\n      betweenRookKing.push(new util.Pos(1, myRank), new util.Pos(2, myRank), new util.Pos(3, myRank))\n    }\n\n    for (const pos of betweenRookKing) {\n      if (this.state.board.get(pos).isOccupied()) {\n        return 'Pieces are between rook and king'\n      }\n    }\n\n    const badPos: util.Pos[] = []\n    if (this.isKingSide) {\n      // Can't castle though check\n      badPos.push(new util.Pos(5, myRank))\n      // Can't castle into check\n      badPos.push(new util.Pos(6, myRank))\n    } else {\n      // Can't castle into check\n      badPos.push(new util.Pos(2, myRank))\n      // Can't castle though check\n      badPos.push(new util.Pos(3, myRank))\n    }\n\n    const attacked = badPos.some(pos => this.state.board.isProtected(pos))\n    if (attacked) {\n      return \"Can't castle into or through check\"\n    }\n    return false\n  }\n}\n\nexport { Castle, Move, EnPassant, NormalMove, FirstPawn, Promotion }\n","import * as util from './util'\nimport * as pieces from './pieces'\nimport * as moves from './moves'\nimport * as immutable from 'immutable'\nimport { strict as assert } from 'assert'\n\nclass Player {\n  color: Readonly<pieces.Color>\n  queenSideCastle: boolean\n  kingSideCastle: boolean\n  enPassantPos: util.Pos | null\n\n  constructor (arg1: Player | Readonly<pieces.Color>) {\n    if (arg1 instanceof Player) {\n      const other = arg1\n      this.color = other.color\n      this.queenSideCastle = other.queenSideCastle\n      this.kingSideCastle = other.kingSideCastle\n      this.enPassantPos = other.enPassantPos\n    } else {\n      this.color = arg1\n      this.queenSideCastle = true\n      this.kingSideCastle = true\n      this.enPassantPos = null\n    }\n  }\n}\n\n/* Board format uses an array of 64 8 bit ints as so:\n  The mapping from (file, rank) to index is done according to rank * 8 + file.\n  Every square is an int in the form of pxaaciii where:\n    i is an int from 0 - 7 where:\n      0: empty\n      1: pawn\n      2: knight\n      3: bishop\n      4: rook\n      5: queen\n      6: king\n    c is 1 for black 0 for white.\n    a is an int from 0 - 3 representing the axis that a piece can move when it's pinned where:\n      0: vertical (unpinned)\n      1: horizontal\n      2: Left-Up/Right-Down\n      3: Left-Down/Right-Up\n    x is set when the king can not move to this square because a piece is protecting it\n    p has multiple meanings depending on what kind of piece it is applied to:\n        current player's piece: this piece is pinned (moving would put king in check)\n        next player's piece: this piece is delivering check to the other player\n        empty square: putting a piece here blocks check (except for double check where only the king can move)\n */\nexport class Board {\n  private readonly raw: Uint8Array\n  private readonly mutable: boolean\n\n  constructor (raw: Uint8Array, mutable: boolean) {\n    this.raw = raw\n    this.mutable = mutable\n  }\n\n  get (pos: util.Pos): pieces.Square {\n    const rawPiece = this.raw[pos.toRaw()] & 0xF\n    switch (rawPiece) {\n      case 0:\n        return pieces.EMPTY\n      case 1:\n        return pieces.WHITE.PAWN\n      case 2:\n        return pieces.WHITE.KNIGHT\n      case 3:\n        return pieces.WHITE.BISHOP\n      case 4:\n        return pieces.WHITE.ROOK\n      case 5:\n        return pieces.WHITE.QUEEN\n      case 6:\n        return pieces.WHITE.KING\n      case 9:\n        return pieces.BLACK.PAWN\n      case 10:\n        return pieces.BLACK.KNIGHT\n      case 11:\n        return pieces.BLACK.BISHOP\n      case 12:\n        return pieces.BLACK.ROOK\n      case 13:\n        return pieces.BLACK.QUEEN\n      case 14:\n        return pieces.BLACK.KING\n      default:\n        assert(false)\n    }\n  }\n\n  getPinnedAxis (pos: util.Pos): 0 | 1 | 2 | 3 {\n    return ((this.raw[pos.toRaw()] >>> 4) & 0x3) as 0 | 1 | 2 | 3\n  }\n\n  isPinned (pos: util.Pos): boolean {\n    return (this.raw[pos.toRaw()] & 0x40) === 0x40\n  }\n\n  isProtected (pos: util.Pos): boolean {\n    return (this.raw[pos.toRaw()] & 0x80) === 0x80\n  }\n\n  set (pos: util.Pos, piece: pieces.Square): Board {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0xF\n    rawValue |= piece.id\n    return this.rawSet(pos, rawValue)\n  }\n\n  clearFlags (pos: util.Pos) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= 0xF\n    return this.rawSet(pos, rawValue)\n  }\n\n  private rawSet (pos: util.Pos, raw: number) {\n    if (this.mutable) {\n      this.raw[pos.toRaw()] = raw\n      return this\n    } else {\n      const newRaw = new Uint8Array(this.raw)\n      newRaw[pos.toRaw()] = raw\n      return new Board(newRaw, false)\n    }\n  }\n\n  setPinnedAxis (pos: util.Pos, axis: 0 | 1 | 2 | 3) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x30\n    rawValue |= axis << 4\n    return this.rawSet(pos, rawValue)\n  }\n\n  setPinned (pos: util.Pos, pinned: boolean) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x40\n    rawValue |= Number(pinned) << 6\n    return this.rawSet(pos, rawValue)\n  }\n\n  setProtected (pos: util.Pos, attacked: boolean) {\n    let rawValue = this.raw[pos.toRaw()]\n    rawValue &= ~0x80\n    rawValue |= Number(attacked) << 7\n    return this.rawSet(pos, rawValue)\n  }\n\n  reduce<ACC> (fun: (acc: ACC, piece: pieces.Square, pos: util.Pos, board: this) => ACC, acc: ACC) {\n    for (let i = 0; i < this.raw.length; i++) {\n      const pos = util.Pos.fromRaw(i)\n      acc = fun(acc, this.get(pos), pos, this)\n    }\n    return acc\n  }\n\n  asMutable () {\n    return new Board(new Uint8Array(this.raw), true)\n  }\n\n  withMutations (fn: (board: Board) => void) {\n    const raw = new Uint8Array(this.raw)\n    fn(new Board(raw, true))\n    return new Board(new Uint8Array(raw), false)\n  }\n}\n\nclass State {\n  board: Board\n  white: Player\n  black: Player\n  currTurn: Readonly<pieces.Color>\n  moveHistory: immutable.List<moves.Move>\n  historyBegin: number\n  halfMove: number\n  threeFoldDetect: immutable.Map<string, number>\n  resign: boolean\n  agreeDraw: boolean\n  checks: number\n\n  constructor (state?: State) {\n    if (typeof state !== 'object') {\n      this.board = getStartingBoard()\n      this.white = new Player(pieces.WHITE)\n      this.black = new Player(pieces.BLACK)\n      this.currTurn = pieces.WHITE\n      this.moveHistory = immutable.List()\n      this.historyBegin = 2\n      this.halfMove = 0\n      this.threeFoldDetect = immutable.Map()\n      this.resign = false\n      this.agreeDraw = false\n      this.checks = 0\n    } else {\n      this.board = state.board\n      this.white = new Player(state.white)\n      this.black = new Player(state.black)\n      this.currTurn = state.currTurn\n      this.moveHistory = state.moveHistory\n      this.historyBegin = state.historyBegin\n      this.halfMove = state.halfMove\n      this.threeFoldDetect = state.threeFoldDetect\n      this.resign = state.resign\n      this.agreeDraw = state.agreeDraw\n      this.checks = state.checks\n    }\n  }\n\n  halfMoveCount () {\n    return this.historyBegin + this.moveHistory.size\n  }\n\n  moveCount () {\n    return Math.floor(this.halfMoveCount() / 2)\n  }\n\n  toFen () {\n    let fen = ''\n    for (let rank = 7; rank >= 0; rank--) {\n      let emptyRun = 0\n      if (rank !== 7) {\n        fen += '/'\n      }\n      for (let file = 0; file < 8; file++) {\n        const piece = this.board.get(new util.Pos(file, rank))\n        if (piece.isOccupied()) {\n          if (emptyRun) {\n            fen += String(emptyRun)\n            emptyRun = 0\n          }\n          fen += piece.fenLetter\n        } else {\n          emptyRun++\n        }\n      }\n      if (emptyRun) {\n        fen += String(emptyRun)\n      }\n    }\n    fen += ' '\n    if (this.currTurn === pieces.WHITE) {\n      fen += 'w'\n    } else {\n      fen += 'b'\n    }\n    fen += ' '\n    if (this.white.kingSideCastle) {\n      fen += 'K'\n    }\n    if (this.white.queenSideCastle) {\n      fen += 'Q'\n    }\n    if (this.black.kingSideCastle) {\n      fen += 'k'\n    }\n    if (this.black.queenSideCastle) {\n      fen += 'q'\n    }\n    if (!(this.white.kingSideCastle || this.white.queenSideCastle || this.black.kingSideCastle || this.black.queenSideCastle)) {\n      fen += '-'\n    }\n    fen += ' '\n    if (this.white.enPassantPos) {\n      fen += this.white.enPassantPos.toString()\n    } else if (this.black.enPassantPos) {\n      fen += this.black.enPassantPos.toString()\n    } else {\n      fen += '-'\n    }\n    fen += ' '\n    fen += String(this.halfMove)\n    fen += ' '\n    fen += String(this.moveCount())\n    return fen\n  }\n\n  toAbvFen () {\n    const lastFenLst = this.toFen().split(' ')\n    lastFenLst.pop()\n    lastFenLst.pop()\n    return lastFenLst.join(' ')\n  }\n\n  modify (fn: (state: State) => void) {\n    const newState = new State(this)\n    newState.board = newState.board.asMutable()\n    fn(newState)\n    newState.board = newState.board.asMutable()\n\n    newState.checks = 0\n    if (newState.board.get(new util.Pos(4, 0)) !== pieces.WHITE.KING) {\n      newState.white.kingSideCastle = false\n      newState.white.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(0, 0)) !== pieces.WHITE.ROOK) {\n      newState.white.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(7, 0)) !== pieces.WHITE.ROOK) {\n      newState.white.kingSideCastle = false\n    }\n\n    if (newState.board.get(new util.Pos(4, 7)) !== pieces.BLACK.KING) {\n      newState.black.kingSideCastle = false\n      newState.black.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(0, 7)) !== pieces.BLACK.ROOK) {\n      newState.black.queenSideCastle = false\n    }\n    if (newState.board.get(new util.Pos(7, 7)) !== pieces.BLACK.ROOK) {\n      newState.black.kingSideCastle = false\n    }\n\n    let enPassantPossible = false\n    let enPassantPos = newState.white.enPassantPos\n    if (newState.black.enPassantPos) {\n      enPassantPos = newState.black.enPassantPos\n    }\n    do {\n      if (!enPassantPos) {\n        break\n      }\n      if (newState.board.get(enPassantPos) !== pieces.EMPTY) {\n        break\n      }\n      if (enPassantPos.rank !== newState.currTurn.OTHER_COLOR.PAWN_RANK - newState.currTurn.PAWN_RANK_DIR) {\n        break\n      }\n      const enPassantPiecePos = enPassantPos.addRank(-this.currTurn.PAWN_RANK_DIR)!\n      if (newState.board.get(enPassantPiecePos) !== newState.currTurn.OTHER_COLOR.PAWN) {\n        break\n      }\n      const enPassPos = enPassantPos\n      const tmpState = newState.modify(tmpState => {\n        tmpState.white.enPassantPos = null\n        tmpState.black.enPassantPos = null\n        tmpState.board.set(enPassantPiecePos, pieces.EMPTY)\n        tmpState.board.set(enPassPos, this.currTurn.OTHER_COLOR.PAWN)\n      })\n      const leftDiag = enPassantPiecePos.addFile(-1)\n      if (leftDiag) {\n        const leftPawnPinned = tmpState.board.isPinned(leftDiag) && tmpState.board.getPinnedAxis(leftDiag) !== 3\n        if (tmpState.board.get(leftDiag) === this.currTurn.PAWN && !leftPawnPinned) {\n          enPassantPossible = true\n          break\n        }\n      }\n\n      const rightDiag = enPassantPiecePos.addFile(1)\n      if (rightDiag) {\n        const rightPawnPinned = tmpState.board.isPinned(rightDiag) && tmpState.board.getPinnedAxis(rightDiag) !== 2\n        if (tmpState.board.get(rightDiag) === this.currTurn.PAWN && !rightPawnPinned) {\n          enPassantPossible = true\n        }\n      }\n    } while (false)\n\n    if (!enPassantPossible) {\n      newState.white.enPassantPos = null\n      newState.black.enPassantPos = null\n    }\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        newState.board.clearFlags(pos)\n      }\n    }\n\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        const piece = newState.board.get(pos)\n        if (piece.isOccupied() && piece.color !== newState.currTurn) {\n          const protects = piece.protects(newState, pos)\n          for (const prot of protects) {\n            newState.board.setProtected(prot, true)\n            if (newState.board.get(prot) === newState.currTurn.KING) {\n              newState.checks++\n              newState.board.setPinned(pos, true)\n            }\n          }\n          piece.pin(newState, pos)\n        }\n      }\n    }\n\n    newState.board = newState.board.withMutations(() => {})\n    return newState\n  }\n\n  getColor (color: pieces.Color) {\n    switch (color) {\n      case pieces.WHITE:\n        return this.white\n      case pieces.BLACK:\n        return this.black\n      default:\n        throw new Error('Not a color')\n    }\n  }\n\n  flipTurn () {\n    return this.modify(newState => {\n      newState.currTurn = newState.currTurn.OTHER_COLOR\n      newState.getColor(newState.currTurn).enPassantPos = null\n      return newState\n    })\n  }\n\n  moves () {\n    let moveList: moves.Move[] = []\n    for (let file = 0; file < 8; file++) {\n      for (let rank = 0; rank < 8; rank++) {\n        const pos = new util.Pos(file, rank)\n        const piece = this.board.get(pos)\n        if (piece.isOccupied() && piece.color === this.currTurn) {\n          moveList = moveList.concat(piece.moves(this, pos))\n        }\n      }\n    }\n    moveList.push(new moves.Castle(this, true), new moves.Castle(this, false))\n    return moveList\n  }\n\n  isDraw () {\n    return this.agreeDraw || (!this.isCheckmate() && !this.moves().some(x => !x.invalid())) || this.isThreeFold() || this.halfMove >= 100\n  }\n\n  isGameOver () {\n    return !this.moves().some(x => !x.invalid()) || this.isDraw() || this.resign\n  }\n\n  drawReason () {\n    if (this.isThreeFold()) {\n      return 'three fold repetition'\n    } else if (this.halfMove >= 100) {\n      return '50 move rule'\n    } else {\n      return 'stalemate'\n    }\n  }\n\n  isThreeFold () {\n    const fen = this.toAbvFen()\n    const count = Number(this.threeFoldDetect.get(fen))\n    return count >= 2\n  }\n\n  isCheck () {\n    return this.checks !== 0\n  }\n\n  isCheckmate () {\n    return !this.moves().some(x => !x.invalid()) && this.isCheck()\n  }\n\n  back (): State {\n    if (this.moveHistory.size === 0) {\n      return this\n    }\n    return Object.freeze(new HistoryState(this.moveHistory.last(undefined)!.state, this.moveHistory, this.moveHistory.size - 1))\n  }\n\n  forward (): State {\n    return this\n  }\n\n  endAltHistory (): State {\n    return this\n  }\n\n  isHistory (): this is HistoryState {\n    return false\n  }\n\n  perft (depth: number) {\n    if (depth === 0) {\n      return 1\n    }\n\n    const moves = this.moves().filter(x => !x.invalid())\n    let nodes = 0\n    for (const move of moves) {\n      nodes += move.do().perft(depth - 1)\n    }\n    return nodes\n  }\n\n  toPGN (gameStartTime: Date, eventName: string, siteName: string, round: string, whiteName: string, blackName: string) {\n    eventName = eventName.trim()\n    if (eventName === '') {\n      eventName = 'Casual Game'\n    }\n    siteName = siteName.trim()\n    if (siteName === '') {\n      siteName = 'Local Game'\n    }\n    round = round.trim()\n    if (round === '') {\n      round = '-'\n    }\n    whiteName = whiteName.trim()\n    if (whiteName === '') {\n      whiteName = 'Unknown'\n    }\n    blackName = blackName.trim()\n    if (blackName === '') {\n      blackName = 'Unknown'\n    }\n    const date = `${gameStartTime.getFullYear()}.${gameStartTime.getMonth()}.${gameStartTime.getDate()}`\n    const exportState = this.endAltHistory().end()\n    let result = '*'\n    if (exportState.isGameOver()) {\n      if (exportState.isDraw()) {\n        result = '1/2-1/2'\n      } else if (exportState.currTurn === pieces.WHITE) {\n        result = '0-1'\n      } else {\n        result = '1-0'\n      }\n    }\n    const pgnTags = [['Event', eventName], ['Site', siteName], ['Date', date], ['Round', round],\n      ['White', whiteName], ['Black', blackName], ['Result', result]]\n    const beginState = exportState.begin()\n    if (beginState.toFen() !== getStartState().toFen()) {\n      pgnTags.push(['SetUp', '1'])\n      pgnTags.push(['FEN', beginState.toFen()])\n    }\n    let outputStr = ''\n    for (const tag of pgnTags) {\n      const tagLine = `[${tag[0]} \"${tag[1]}\"]\\n`\n      outputStr += tagLine\n    }\n    const moveLineGen = new util.PgnMoveLineGen()\n    let moveCount = beginState.historyBegin\n    // If game state starts from black\n    if (moveCount % 2 === 1) {\n      moveLineGen.addToken(`${Math.floor(moveCount / 2)}...`)\n    }\n    for (const move of exportState.moveHistory) {\n      if (moveCount % 2 === 0) {\n        moveLineGen.addToken(`${Math.floor(moveCount / 2)}.`)\n      }\n      moveCount++\n      moveLineGen.addToken(move.toNotation().toString())\n    }\n    moveLineGen.addToken(result)\n    return outputStr + moveLineGen.done() + '\\n'\n  }\n\n  begin () {\n    let lastState: State = this\n    let state = this.back()\n    while (state !== lastState) {\n      lastState = state\n      state = state.back()\n    }\n    return state\n  }\n\n  end () {\n    let lastState: State = this\n    let state = this.forward()\n    while (state !== lastState) {\n      lastState = state\n      state = state.forward()\n    }\n    return state\n  }\n}\n\nclass HistoryState extends State {\n  moveIndex: number\n\n  constructor (state: State, history: immutable.List<moves.Move>, moveIndex: number) {\n    super(state)\n    this.moveHistory = history\n    this.moveIndex = moveIndex\n  }\n\n  moveCount () {\n    return Math.floor((this.moveIndex + this.historyBegin) / 2)\n  }\n\n  back () {\n    if (this.moveIndex === 0) {\n      return this\n    }\n    const moveIndex = this.moveIndex - 1\n    const lastState = this.moveHistory.get(moveIndex)!.state\n    if (lastState.isHistory()) {\n      return lastState\n    }\n    return Object.freeze(new HistoryState(lastState, this.moveHistory, moveIndex))\n  }\n\n  forward () {\n    if (this.moveIndex >= this.moveHistory.size - 1) {\n      return this.moveHistory.last(undefined)!.do()\n    }\n    const moveIndex = this.moveIndex + 1\n    const forwardState = this.moveHistory.get(moveIndex)!.state\n    if (forwardState.isHistory()) {\n      return forwardState\n    }\n    return Object.freeze(new HistoryState(forwardState, this.moveHistory, moveIndex))\n  }\n\n  modify (fn: (state: State) => void) {\n    const newState = new AltHistoryState(this, this.moveHistory, this.moveIndex)\n    fn(newState)\n    Object.freeze(newState.white)\n    Object.freeze(newState.black)\n    return Object.freeze(newState)\n  }\n\n  commandPrompt () {\n    if (this.currTurn === pieces.WHITE) {\n      return `History ${this.moveCount()}. WHITE>`\n    } else {\n      return `History ${this.moveCount()}. BLACK>`\n    }\n  }\n\n  isHistory () {\n    return true\n  }\n}\n\nclass AltHistoryState extends HistoryState {\n  altBranch: State\n\n  constructor (state: State, history: immutable.List<moves.Move>, moveIndex: number) {\n    super(state, history, moveIndex)\n    if (state instanceof AltHistoryState) {\n      this.altBranch = state.altBranch\n    } else {\n      this.altBranch = state\n    }\n  }\n\n  endAltHistory (): State {\n    return this.altBranch\n  }\n\n  commandPrompt () {\n    if (this.currTurn === pieces.WHITE) {\n      return `Alt History ${this.moveCount()}. WHITE>`\n    } else {\n      return `Alt History ${this.moveCount()}. BLACK>`\n    }\n  }\n}\n\nlet START_STATE: State | null = null\nlet STARTING_BOARD: Board | null = null\n\nfunction getStartingBoard (): Board {\n  if (!STARTING_BOARD) {\n    const board = new Uint8Array(64)\n    for (let i = 0; i < 64; i++) {\n      board[i] = pieces.EMPTY.id\n    }\n    board.set([pieces.WHITE.ROOK.id, pieces.WHITE.KNIGHT.id, pieces.WHITE.BISHOP.id, pieces.WHITE.QUEEN.id,\n      pieces.WHITE.KING.id, pieces.WHITE.BISHOP.id, pieces.WHITE.KNIGHT.id, pieces.WHITE.ROOK.id], 0)\n    for (let i = 8; i < 16; i++) {\n      board[i] = pieces.WHITE.PAWN.id\n    }\n    for (let i = 48; i < 56; i++) {\n      board[i] = pieces.BLACK.PAWN.id\n    }\n    board.set([pieces.BLACK.ROOK.id, pieces.BLACK.KNIGHT.id, pieces.BLACK.BISHOP.id, pieces.BLACK.QUEEN.id,\n      pieces.BLACK.KING.id, pieces.BLACK.BISHOP.id, pieces.BLACK.KNIGHT.id, pieces.BLACK.ROOK.id], 56)\n    STARTING_BOARD = new Board(board, false)\n  }\n  return STARTING_BOARD\n}\n\nfunction getStartState (): State {\n  if (!START_STATE) {\n    START_STATE = new State().modify(x => x)\n  }\n  return START_STATE\n}\n\nconst FEN_REGEX = /^((?:[kqnbrpKQNBRP1-8]+\\/){7}[kqnbrpKQNBRP1-8]+)\\s+([bw])\\s+(KQ?k?q?|Qk?q?|kq?|q|-)\\s+((?:[a-h][36])|-)\\s+(\\d+)\\s+(\\d+)$/\n\nfunction stateFromFen (fen: string) {\n  const board = new Uint8Array(64)\n  for (let i = 0; i < 64; i++) {\n    board[i] = pieces.EMPTY.id\n  }\n  let rank = 7\n  const parsedFen = FEN_REGEX.exec(fen.trim())\n  if (!parsedFen) {\n    throw new Error('Fen syntax error')\n  }\n  const rawBoard = parsedFen[1].split('/')\n  for (const rawRow of rawBoard) {\n    let file = 0\n    for (const char of rawRow) {\n      if (file >= 8) {\n        throw new Error('Fen board has too many pieces on one row')\n      }\n      const asNum = Number(char)\n      if (asNum) {\n        file += asNum\n      } else {\n        board[new util.Pos(file, rank).toRaw()] = pieces.FROM_FEN.get(char)!.id\n        file++\n      }\n    }\n    if (file < 7) {\n      throw new Error('Fen board has too little pieces on one row')\n    }\n    if (file > 8) {\n      throw new Error('Fen board has too many pieces on one row')\n    }\n    rank--\n  }\n  let currPlayer = pieces.WHITE\n  if (parsedFen[2] === 'b') {\n    currPlayer = pieces.BLACK\n  }\n  const white = new Player(pieces.WHITE)\n  white.kingSideCastle = parsedFen[3].includes('K')\n  white.queenSideCastle = parsedFen[3].includes('Q')\n  const black = new Player(pieces.BLACK)\n  black.kingSideCastle = parsedFen[3].includes('k')\n  black.queenSideCastle = parsedFen[3].includes('q')\n\n  const enPassantPos = parsedFen[4]\n  if (enPassantPos !== '-') {\n    let enPassantPlayer = black\n    if (currPlayer === pieces.BLACK) {\n      enPassantPlayer = white\n    }\n    const file = util.convertFileLetter(enPassantPos[0])\n    const rank = util.convertRankLetter(enPassantPos[1])\n    enPassantPlayer.enPassantPos = new util.Pos(file, rank)\n  }\n  const halfMove = Number(parsedFen[5])\n  let moveCount = Number(parsedFen[6]) * 2\n  if (moveCount === 0) {\n    throw new Error('Chess games start on move 1')\n  }\n  if (currPlayer === pieces.BLACK) {\n    moveCount++\n  }\n  return getStartState().modify(x => {\n    x.board = new Board(board, false)\n    x.white = white\n    x.black = black\n    x.currTurn = currPlayer\n    x.historyBegin = moveCount\n    x.halfMove = halfMove\n  })\n}\n\nexport { State, getStartState, stateFromFen }\n","import * as moves from './moves'\nimport * as state from './state'\nimport * as util from './util'\nimport * as immutable from 'immutable'\nimport { State } from './state'\n\nclass ConstructorKey {}\n\nabstract class Square {\n  constructor (_key: ConstructorKey) {\n    if (typeof this.isOccupied !== 'function') {\n      throw new Error('isOccupied function not defined')\n    }\n\n    if (typeof this.canMoveOnto !== 'function') {\n      throw new Error('canMoveOnto function not defined')\n    }\n\n    if (typeof this.canBeCaptured !== 'function') {\n      throw new Error('canBeCaptured function not defined')\n    }\n  }\n\n  id = 0\n  abstract isOccupied (): this is Piece;\n  abstract canMoveOnto (piece: Piece): boolean;\n  abstract canBeCaptured (piece: Piece): boolean;\n}\n\nclass EmptySquare extends Square {\n  isOccupied () {\n    return false\n  }\n\n  canMoveOnto (_other: Piece) {\n    return true\n  }\n\n  canBeCaptured (_other: Piece) {\n    return false\n  }\n}\n\nfunction moveLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  const moveList = []\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    moveList.push(new moves.NormalMove(state, piece, fromPos, toPos))\n    // Once the piece hits another piece stop\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n  return moveList\n}\n\nfunction protectLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  const protects = []\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    protects.push(toPos)\n    // Once the piece hits another piece stop except for king\n    const targetPiece = state.board.get(toPos)\n    if (targetPiece.canBeCaptured(piece) && targetPiece !== state.currTurn.KING) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n\n  if (toPos) {\n    protects.push(toPos)\n  }\n  return protects\n}\n\nfunction applyCheckPinFlag (state: state.State, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos) !== state.currTurn.KING) {\n    state.board.setPinned(toPos, true)\n    toPos = toPos.add(line[0], line[1])\n  }\n}\n\nfunction checkForKing (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    if (state.board.get(toPos) === state.currTurn.KING) {\n      return true\n    }\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n  return false\n}\n\nfunction pinLine (state: state.State, piece: Piece, fromPos: util.Pos, line: [number, number]) {\n  let toPos = fromPos.add(line[0], line[1])\n  while (toPos && state.board.get(toPos).canMoveOnto(piece)) {\n    if (state.board.get(toPos).canBeCaptured(piece)) {\n      if (state.board.get(toPos) === state.currTurn.KING) {\n        applyCheckPinFlag(state, fromPos, line)\n      } else if (checkForKing(state, piece, toPos, line)) {\n        state.board.setPinned(toPos, true)\n        let pinnedAxis: 0 | 1 | 2 | 3 = 0\n        if ((line[0] === 1 && line[1] === 0) || (line[0] === -1 && line[1] === 0)) {\n          pinnedAxis = 1\n        } else if ((line[0] === -1 && line[1] === 1) || (line[0] === 1 && line[1] === -1)) {\n          pinnedAxis = 2\n        } else if ((line[0] === -1 && line[1] === -1) || (line[0] === 1 && line[1] === 1)) {\n          pinnedAxis = 3\n        }\n        state.board.setPinnedAxis(toPos, pinnedAxis)\n      }\n      break\n    }\n    toPos = toPos.add(line[0], line[1])\n  }\n}\n\nabstract class Piece extends Square {\n  color: Readonly<Color>\n  fenLetter: string\n\n  constructor (key: ConstructorKey, color: Readonly<Color>, fenLetter: string, id: number) {\n    super(key)\n\n    if (typeof this.moves !== 'function') {\n      throw new Error('Moves function not defined')\n    }\n    if (typeof this.getPGNLetter !== 'function') {\n      throw new Error('Get pgn letter not defined')\n    }\n\n    this.color = color\n    this.fenLetter = fenLetter\n    this.id = id\n  }\n\n  isOccupied () {\n    return true\n  }\n\n  canMoveOnto (other: Piece) {\n    return this.color !== other.color\n  }\n\n  canBeCaptured (other: Piece) {\n    return this.canMoveOnto(other)\n  }\n\n  // This method will get a mutable state\n  pin (state: State, pos: util.Pos) {}\n\n  abstract moves (state: state.State, myPos: util.Pos): moves.Move[]\n  abstract protects (state: state.State, myPos: util.Pos): util.Pos[]\n  abstract getPGNLetter(): string\n}\n\nclass Pawn extends Piece {\n  addMove (state: state.State, moveList: moves.Move[], fromPos: util.Pos, toPos: util.Pos) {\n    if (toPos.rank === this.color.OTHER_COLOR.KING_RANK) {\n      for (const choice of this.color.PROMOTE_LIST) {\n        moveList.push(new moves.Promotion(state, this, fromPos, toPos, choice))\n      }\n    } else {\n      moveList.push(new moves.NormalMove(state, this, fromPos, toPos))\n    }\n  }\n\n  getPGNLetter () {\n    return ''\n  }\n\n  moves (state: state.State, myPos: util.Pos) {\n    const moveList: moves.Move[] = []\n    const forwardMove = myPos.addRank(this.color.PAWN_RANK_DIR)\n\n    if (!forwardMove) {\n      return moveList\n    }\n    const forwardOccupied = state.board.get(forwardMove!).isOccupied()\n    if (!forwardOccupied) {\n      this.addMove(state, moveList, myPos, forwardMove!)\n    }\n    if (!forwardOccupied && this.color.PAWN_RANK === myPos.rank) {\n      const firstMove = myPos.addRank(this.color.PAWN_RANK_DIR * 2)\n      console.assert(firstMove, 'First move should be in bounds')\n      if (!state.board.get(firstMove!).isOccupied()) {\n        moveList.push(new moves.FirstPawn(state, this, myPos, firstMove!))\n      }\n    }\n    const otherColor = state.getColor(this.color.OTHER_COLOR)\n    const leftDiag = myPos.add(-1, this.color.PAWN_RANK_DIR)\n\n    if (leftDiag && state.board.get(leftDiag).canBeCaptured(this)) {\n      this.addMove(state, moveList, myPos, leftDiag)\n    }\n    const rightDiag = myPos.add(1, this.color.PAWN_RANK_DIR)\n    if (rightDiag && state.board.get(rightDiag).canBeCaptured(this)) {\n      this.addMove(state, moveList, myPos, rightDiag)\n    }\n    if (otherColor.enPassantPos) {\n      if (leftDiag && otherColor.enPassantPos.compare(leftDiag) === 0) {\n        moveList.push(new moves.EnPassant(state, this, myPos, leftDiag))\n      }\n      if (rightDiag && otherColor.enPassantPos.compare(rightDiag) === 0) {\n        moveList.push(new moves.EnPassant(state, this, myPos, rightDiag))\n      }\n    }\n\n    return moveList\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const protects = []\n    const leftDiag = myPos.add(-1, this.color.PAWN_RANK_DIR)\n    if (leftDiag) {\n      protects.push(leftDiag)\n    }\n    const rightDiag = myPos.add(1, this.color.PAWN_RANK_DIR)\n    if (rightDiag) {\n      protects.push(rightDiag)\n    }\n    return protects\n  }\n}\n\nclass Rook extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return (line\n      .map(line => moveLine(state, this, pos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n\n  getPGNLetter () {\n    return 'R'\n  }\n\n  pin (state: State, pos: util.Pos) {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return line.forEach(line => pinLine(state, this, pos, line))\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const line: [number, number][] = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n    return (line\n      .map(line => protectLine(state, this, myPos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n}\n\nclass Knight extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const knightPos = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]]\n    const moveList = []\n    for (const deltaPos of knightPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos && state.board.get(newPos).canMoveOnto(this)) {\n        moveList.push(new moves.NormalMove(state, this, pos, newPos))\n      }\n    }\n    return moveList\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    const knightPos = [[1, 2], [-1, 2], [1, -2], [-1, -2], [2, 1], [-2, 1], [2, -1], [-2, -1]]\n    const protects = []\n    for (const deltaPos of knightPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos) {\n        protects.push(newPos)\n      }\n    }\n    return protects\n  }\n\n  getPGNLetter () {\n    return 'N'\n  }\n}\n\nclass Bishop extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return (line\n      .map(line => moveLine(state, this, pos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n\n  getPGNLetter () {\n    return 'B'\n  }\n\n  pin (state: State, pos: util.Pos) {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return line.forEach(line => pinLine(state, this, pos, line))\n  }\n\n  protects (state: State, myPos: util.Pos): util.Pos[] {\n    const line: [number, number][] = [[1, 1], [-1, -1], [1, -1], [-1, 1]]\n    return (line\n      .map(line => protectLine(state, this, myPos, line))\n      .reduce((acc, val) => acc.concat(val)))\n  }\n}\n\nclass Queen extends Piece {\n  moves (state: state.State, pos: util.Pos) {\n    return Bishop.prototype.moves.call(this, state, pos).concat(Rook.prototype.moves.call(this, state, pos))\n  }\n\n  getPGNLetter () {\n    return 'Q'\n  }\n\n  pin (state: state.State, pos: util.Pos) {\n    Bishop.prototype.pin.call(this, state, pos)\n    Rook.prototype.pin.call(this, state, pos)\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    return Bishop.prototype.protects.call(this, state, pos).concat(Rook.prototype.protects.call(this, state, pos))\n  }\n}\n\nclass King extends Piece {\n  moves (state: state.State, pos: util.Pos): moves.Move[] {\n    const kingPos = [[1, 0], [1, 1], [-1, 0], [-1, -1], [1, -1], [-1, 1], [0, 1], [0, -1]]\n    const moveList = []\n    for (const deltaPos of kingPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos && state.board.get(newPos).canMoveOnto(this)) {\n        moveList.push(new moves.NormalMove(state, this, pos, newPos))\n      }\n    }\n    return moveList\n  }\n\n  protects (state: State, pos: util.Pos): util.Pos[] {\n    const kingPos = [[1, 0], [1, 1], [-1, 0], [-1, -1], [1, -1], [-1, 1], [0, 1], [0, -1]]\n    const protects = []\n    for (const deltaPos of kingPos) {\n      const newPos = pos.add(deltaPos[0], deltaPos[1])\n      if (newPos) {\n        protects.push(newPos)\n      }\n    }\n    return protects\n  }\n\n  getPGNLetter () {\n    return 'K'\n  }\n}\n\nexport interface Color {\n  PAWN: Readonly<Piece>,\n  ROOK: Readonly<Piece>,\n  KNIGHT: Readonly<Piece>,\n  BISHOP: Readonly<Piece>,\n  QUEEN: Readonly<Piece>,\n  KING: Readonly<Piece>,\n  KING_RANK: number,\n  PAWN_RANK: number,\n  PAWN_RANK_DIR: number,\n  PROMOTE_LIST: Readonly<Readonly<Piece>[]>\n  FROM_LETTER: immutable.Map<string, Readonly<Piece>>,\n  OTHER_COLOR: Readonly<Color>,\n}\n\nfunction genColor (kingRank: number, pawnRank: number, pawnRankDir: number, fenConv: (l: string) => string, idOffset: number) {\n  const ret = {} as Color\n  const key = new ConstructorKey()\n  Object.assign(ret, {\n    PAWN: Object.freeze(new Pawn(key, ret, fenConv('P'), 1 + idOffset)),\n    KNIGHT: Object.freeze(new Knight(key, ret, fenConv('N'), 2 + idOffset)),\n    BISHOP: Object.freeze(new Bishop(key, ret, fenConv('B'), 3 + idOffset)),\n    ROOK: Object.freeze(new Rook(key, ret, fenConv('R'), 4 + idOffset)),\n    QUEEN: Object.freeze(new Queen(key, ret, fenConv('Q'), 5 + idOffset)),\n    KING: Object.freeze(new King(key, ret, fenConv('K'), 6 + idOffset)),\n    KING_RANK: kingRank,\n    PAWN_RANK: pawnRank,\n    PAWN_RANK_DIR: pawnRankDir\n  })\n  ret.PROMOTE_LIST = Object.freeze([ret.QUEEN, ret.KNIGHT, ret.ROOK, ret.BISHOP])\n  const fromLetter: [string, Piece][] = [['K', ret.KING], ['Q', ret.QUEEN], ['R', ret.ROOK],\n    ['B', ret.BISHOP], ['N', ret.KNIGHT], ['', ret.PAWN]]\n  ret.FROM_LETTER = immutable.Map(fromLetter)\n  return ret\n}\n\nconst WRITABLE_WHITE = genColor(0, 1, 1, x => x, 0)\nconst WRITABLE_BLACK = genColor(7, 6, -1, x => x.toLowerCase(), 8)\nWRITABLE_WHITE.OTHER_COLOR = WRITABLE_BLACK\nObject.freeze(WRITABLE_WHITE)\nWRITABLE_BLACK.OTHER_COLOR = WRITABLE_WHITE\nObject.freeze(WRITABLE_BLACK)\n\nconst WHITE: Readonly<Color> = WRITABLE_WHITE\nconst BLACK: Readonly<Color> = WRITABLE_BLACK\n\nconst FROM_FEN_ARRAY: [string, Readonly<Piece>][] = [['K', WHITE.KING], ['Q', WHITE.QUEEN], ['R', WHITE.ROOK],\n  ['B', WHITE.BISHOP], ['N', WHITE.KNIGHT], ['P', WHITE.PAWN],\n  ['k', BLACK.KING], ['q', BLACK.QUEEN], ['r', BLACK.ROOK],\n  ['b', BLACK.BISHOP], ['n', BLACK.KNIGHT], ['p', BLACK.PAWN]]\n\nconst FROM_FEN = immutable.Map(FROM_FEN_ARRAY)\n\nconst EMPTY = Object.freeze(new EmptySquare(new ConstructorKey()))\n\nexport {\n  EMPTY,\n  WHITE,\n  BLACK,\n  FROM_FEN,\n  Piece,\n  Square\n}\n","import { BLACK, Square, WHITE } from './logic/pieces'\nimport * as React from 'react'\nimport { Theme, ThemeManager } from './theme'\n\nexport interface BoardSquareProps {\n  isBlack?: boolean\n  inCheck?: boolean\n  piece: Square\n  onClick?: () => void\n  highlighted?: boolean\n  canMoveTo?: boolean\n  children?: React.ReactNode\n  theme: ThemeManager\n}\n\nfunction getPieceName (piece: Square): string | undefined {\n  switch (piece) {\n    case WHITE.QUEEN:\n      return 'White Queen'\n    case WHITE.KING:\n      return 'White King'\n    case WHITE.BISHOP:\n      return 'White Bishop'\n    case WHITE.ROOK:\n      return 'White Rook'\n    case WHITE.KNIGHT:\n      return 'White Knight'\n    case WHITE.PAWN:\n      return 'White Pawn'\n    case BLACK.QUEEN:\n      return 'Black Queen'\n    case BLACK.KING:\n      return 'Black King'\n    case BLACK.BISHOP:\n      return 'Black Bishop'\n    case BLACK.ROOK:\n      return 'Black Rook'\n    case BLACK.KNIGHT:\n      return 'Black Knight'\n    case BLACK.PAWN:\n      return 'Black Pawn'\n  }\n  return undefined\n}\n\nfunction getPieceImage (theme: Theme, piece: Square): React.ReactNode | undefined {\n  const name = getPieceName(piece)\n  if (name) {\n    return <img alt={name} className='ChessPiece' src={`${process.env.PUBLIC_URL}/pieces/${theme.piece.prefix}/${name}.svg`} />\n  }\n  return undefined\n}\n\nexport default function BoardSquare (props: BoardSquareProps) {\n  let className = `ChessBoardSquare ${props.theme.className}`\n  if (props.isBlack) {\n    className += ' ChessBoardSquareBlack'\n  } else {\n    className += ' ChessBoardSquareWhite'\n  }\n  let highlight\n  if (props.highlighted) {\n    highlight = <div className='Highlight'/>\n  }\n  let checkHighlight\n  if (props.inCheck) {\n    checkHighlight = <div className='InCheck'/>\n  }\n  const pieceImage = getPieceImage(props.theme.theme, props.piece)\n  let moveIndicator\n  if (props.canMoveTo && !pieceImage) {\n    moveIndicator = <div className='MoveDot'/>\n  }\n  if (props.canMoveTo && pieceImage) {\n    moveIndicator =\n      <svg className='Overlay'>\n        <circle r='47.5%' cx='50%' cy='50%' fill='none' stroke='black' strokeWidth='2.5%' />\n      </svg>\n  }\n  return (\n    <div className={className} onClick={props.onClick}>\n      {highlight}\n      {checkHighlight}\n      {pieceImage}\n      {moveIndicator}\n      {props.children}\n    </div>\n  )\n}\n","import * as immutable from 'immutable'\nimport { Promotion } from './logic/moves'\nimport { State } from './logic/state'\nimport BoardSquare from './BoardSquare'\nimport * as React from 'react'\nimport { ThemeManager } from './theme'\n\ninterface PromoteMenuProps {\n  moves: immutable.List<Promotion>,\n  onPromote: (state: State) => void,\n  theme: ThemeManager\n}\n\nexport default function PromoteMenu (props: PromoteMenuProps) {\n  const promotes = []\n  let key = 0\n  for (const move of props.moves) {\n    const onClick = () => {\n      props.onPromote(move.do())\n    }\n    promotes.push(<BoardSquare key={key++} piece={move.promoteChoice} onClick={onClick} theme={props.theme} />)\n  }\n  return (\n    <div className='PromoteMenu'>\n      {promotes}\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\n\ntype Action = () => void\n\nconst RESIZE_HANDLERS = new Map<Symbol, Action>()\n\nfunction onResize () {\n  for (const handler of RESIZE_HANDLERS.values()) {\n    handler()\n  }\n}\n\nwindow.addEventListener('resize', onResize)\n\nexport default function useResizeEffect (handler: Action) {\n  const resizeKey = useState(() => Symbol('Resize Key'))[0]\n\n  useEffect(() => {\n    RESIZE_HANDLERS.set(resizeKey, handler)\n  }, [handler])\n\n  useEffect(() => {\n    return () => {\n      RESIZE_HANDLERS.delete(resizeKey)\n    }\n  }, [])\n}\n","import * as React from 'react'\nimport { useEffect, useRef, useState } from 'react'\nimport { Pos } from './logic/util'\nimport { Move, Promotion } from './logic/moves'\nimport { BLACK, EMPTY, Piece, WHITE } from './logic/pieces'\nimport { State } from './logic/state'\nimport * as immutable from 'immutable'\nimport PromoteMenu from './PromoteMenu'\nimport BoardSquare from './BoardSquare'\nimport { ThemeManager } from './theme'\nimport useResizeEffect from './useResizeEffect'\n\nexport interface ChessBoardSetup {\n  setupPiece?: Piece\n}\n\nexport interface ChessBoardProps {\n  state: State\n  setup?: ChessBoardSetup\n  highlightedPos?: Pos\n  changeHighlight?: (pos: Pos | undefined) => void\n  makeMove?: (state: State) => void\n  flipBoard?: boolean\n  theme: ThemeManager\n}\n\nexport default function ChessBoard (props: ChessBoardProps) {\n  const [promotePos, setPromotePos] = useState<Pos | null>(null)\n  const [boardSize, setBoardSize] = useState(0)\n  const boardRef = useRef<HTMLDivElement | null>(null)\n  useResizeEffect(() => measureBoardSize(boardRef.current))\n  useEffect(() => {\n    measureBoardSize(boardRef.current)\n  })\n\n  function measureBoardSize (board: HTMLDivElement | null | undefined) {\n    if (board) {\n      const newBoardSize = Math.min(board.offsetHeight, board.offsetWidth)\n      if (boardSize !== newBoardSize) {\n        setBoardSize(newBoardSize)\n      }\n      boardRef.current = board\n    } else {\n      boardRef.current = null\n    }\n  }\n\n  const highlightedPos = props.highlightedPos\n\n  if (props.changeHighlight && highlightedPos && (!props.state.board.get(highlightedPos).isOccupied() || props.setup?.setupPiece)) {\n    props.changeHighlight(undefined)\n  }\n  if (!highlightedPos && promotePos) {\n    setPromotePos(null)\n  }\n\n  const squares = []\n  let isBlack = false\n  let moves: Move[] = []\n  let drawPromotePos = promotePos\n  if (drawPromotePos && !props.flipBoard && props.state.currTurn === BLACK) {\n    drawPromotePos = drawPromotePos.addRank(3)\n  }\n  if (drawPromotePos && props.flipBoard && props.state.currTurn === WHITE) {\n    drawPromotePos = drawPromotePos.addRank(-3)\n  }\n  if (highlightedPos && props.makeMove) {\n    const moveFilter = (move: Move) => {\n      if (move.invalid() || props.state.isGameOver()) {\n        return false\n      }\n      if (move.isNormal()) {\n        return move.fromPos.compare(highlightedPos) === 0\n      }\n      if (move.isCastle()) {\n        return highlightedPos.rank === props.state.currTurn.KING_RANK && highlightedPos.file === 4\n      }\n      return false\n    }\n    moves = props.state.moves().filter(moveFilter)\n    // Display black's moves as well\n    if (props.setup) {\n      moves = moves.concat(props.state.flipTurn().moves().filter(moveFilter))\n    }\n  }\n  let initRank = 7\n  let rankStep = -1\n  let initFile = 0\n  let fileStep = 1\n  if (props.flipBoard) {\n    initRank = 0\n    rankStep = 1\n    initFile = 7\n    fileStep = -1\n  }\n\n  for (let i = initRank; i >= 0 && i < 8; i += rankStep) {\n    isBlack = !isBlack\n    for (let j = initFile; j >= 0 && j < 8; j += fileStep) {\n      isBlack = !isBlack\n      const pos = new Pos(j, i)\n      const highlighted = Boolean(highlightedPos && pos.compare(highlightedPos) === 0)\n      const piece = props.state.board.get(new Pos(j, i))\n      const inCheck = piece === props.state.currTurn.KING && props.state.isCheck()\n      const moveIndex = moves.findIndex(move => {\n        if (move.isNormal()) {\n          return move.toPos.compare(pos) === 0\n        }\n        if (move.isCastle()) {\n          if (pos.rank !== props.state.currTurn.KING_RANK) {\n            return false\n          }\n          if (move.isKingSide) {\n            return pos.file === 7 || pos.file === 6\n          } else {\n            return pos.file === 2 || pos.file === 0\n          }\n        }\n        return false\n      })\n      let onClick = () => {\n        props.changeHighlight && props.changeHighlight(undefined)\n        setPromotePos(null)\n      }\n      const move = moves[moveIndex]\n      if (highlightedPos && pos.compare(highlightedPos) === 0) {\n        // deselect on selecting the same piece twice\n      } else if (highlightedPos && props.makeMove && props.setup) {\n        const makeMove = props.makeMove\n        onClick = () => {\n          makeMove(props.state.modify(state => {\n            const piece = state.board.get(highlightedPos)\n            state.board = state.board.set(highlightedPos, EMPTY)\n            state.board = state.board.set(pos, piece)\n          }))\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n      } else if (props.setup && props.setup.setupPiece && props.makeMove) {\n        const makeMove = props.makeMove\n        const setupPiece = props.setup.setupPiece\n        onClick = () => {\n          makeMove(props.state.modify(state => {\n            state.board = state.board.set(pos, setupPiece)\n          }))\n          props.changeHighlight && props.changeHighlight(undefined)\n        }\n      } else if (moveIndex === -1 && piece.isOccupied()) {\n        onClick = () => {\n          props.changeHighlight && props.changeHighlight(pos)\n          setPromotePos(null)\n        }\n      } else if (moveIndex >= 0 && ((move.isNormal() && !move.isPromote()) || move.isCastle())) {\n        onClick = () => {\n          props.makeMove!(moves[moveIndex].do())\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n      } else if (moveIndex >= 0 && move.isNormal() && move.isPromote() && !promotePos) {\n        const promote = move\n        onClick = () => {\n          setPromotePos(promote.toPos)\n        }\n      }\n      let promoteMenu\n      if (drawPromotePos && pos.compare(drawPromotePos) === 0) {\n        const onPromote = (state: State) => {\n          props.makeMove!(state)\n          props.changeHighlight && props.changeHighlight(undefined)\n          setPromotePos(null)\n        }\n\n        function PromoteFilter (move: Move): move is Promotion {\n          if (!move.isNormal() || !promotePos || move.toPos.compare(promotePos) !== 0) {\n            return false\n          }\n          return move.isPromote()\n        }\n\n        const promoteList = immutable.List(moves.filter<Promotion>(PromoteFilter))\n\n        promoteMenu = <PromoteMenu moves={promoteList} onPromote={onPromote} theme={props.theme}/>\n      }\n      const canMoveTo = moveIndex >= 0 && !promotePos\n      squares.push(\n        <BoardSquare key={i * 8 + j} canMoveTo={canMoveTo} isBlack={isBlack} piece={piece} highlighted={highlighted}\n                     inCheck={inCheck} onClick={onClick} theme={props.theme}>\n          {promoteMenu}\n        </BoardSquare>\n      )\n    }\n  }\n  return (\n    <div className=\"ChessBoardSizer\" ref={measureBoardSize}>\n      <div className=\"ChessBoard\" style={ { height: boardSize, width: boardSize } }>\n        {squares}\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\n\ntype LabelledTextboxProps = React.InputHTMLAttributes<HTMLInputElement> & {label: string}\n\nexport default function LabelledTextBox (props: LabelledTextboxProps) {\n  const textboxProps: any = { ...props }\n  delete textboxProps.label\n  if (textboxProps.className) {\n    textboxProps.className += ' '\n  } else {\n    textboxProps.className = ''\n  }\n  textboxProps.className += 'LabelledTextboxTextbox'\n  return (\n    <div className='LabelledTextbox'>\n      <label>{props.label}</label>\n      <input {...textboxProps}/>\n    </div>\n  )\n}\n","import { getStartState, State, stateFromFen } from './logic/state'\nimport { History, Location } from 'history'\n\nexport function getStateFromQuery (history: History) {\n  const query = new URLSearchParams(history.location.search)\n  const rawState = query.get('fen')\n  if (rawState) {\n    try {\n      return stateFromFen(rawState)\n      // Ignore bad fen strings\n    } catch (e) {}\n  }\n  return getStartState()\n}\n\nexport function changeMode (history: History, location: Location, state: State, path: string, replace: boolean) {\n  const newLoc = { ...location }\n  const query = new URLSearchParams(newLoc.search)\n  const fen = state.toFen()\n  newLoc.pathname = process.env.PUBLIC_URL + path\n  if (fen === getStartState().toFen()) {\n    query.delete('fen')\n  } else {\n    query.set('fen', state.toFen())\n  }\n  newLoc.search = query.toString()\n  if (replace) {\n    history.replace(newLoc)\n  } else {\n    history.push(newLoc)\n  }\n}\n","import { getStartState, State, stateFromFen } from './logic/state'\nimport * as React from 'react'\nimport { BLACK, Piece, WHITE } from './logic/pieces'\nimport LabelledTextBox from './LabelledTextbox'\nimport { ChangeEvent, useState } from 'react'\nimport BoardSquare from './BoardSquare'\nimport { Pos } from './logic/util'\nimport { changeMode } from './util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ThemeManager } from './theme'\n\nexport interface SetupInfoProps {\n  state: State\n  changeState: (state: State) => void\n  selectedPiece?: Piece\n  selectPiece: (piece?: Piece) => void\n  theme: ThemeManager\n  openTheme: () => void\n}\n\nexport default function SetupInfo (props: SetupInfoProps) {\n  const [inputFen, setInputFen] = useState(() => props.state.toFen())\n  const [fenImportError, setImportError] = useState<string>()\n  const history = useHistory()\n  const location = useLocation()\n\n  let errorKey = 0\n  const errors: React.ReactElement[] = []\n  let hasError = false\n  function newError (condition: unknown, text: string | undefined | null) {\n    if (condition) {\n      hasError = true\n      errors.push(\n        <p className='ErrorText' key={errorKey}>\n          {text}\n        </p>\n      )\n    }\n    errorKey++\n  }\n  function onInputFenChange (event: ChangeEvent<HTMLInputElement>) {\n    setInputFen(event.target.value)\n  }\n  function onImportFen () {\n    try {\n      props.changeState(stateFromFen(inputFen))\n      setImportError(undefined)\n    } catch (e) {\n      setImportError(e.toString())\n    }\n  }\n  function onReset () {\n    props.changeState(getStartState())\n  }\n  function onClear () {\n    props.changeState(stateFromFen('8/8/8/8/8/8/8/8 w - - 0 1'))\n  }\n  function onToggleWhiteKingSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.white.kingSideCastle = event.target.checked }))\n  }\n  function onToggleWhiteQueenSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.white.queenSideCastle = event.target.checked }))\n  }\n  function onToggleBlackKingSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.black.kingSideCastle = event.target.checked }))\n  }\n  function onToggleBlackQueenSideCastle (event: ChangeEvent<HTMLInputElement>) {\n    props.changeState(props.state.modify(newState => { newState.black.queenSideCastle = event.target.checked }))\n  }\n  function onChangeFirstMove (event: ChangeEvent<HTMLSelectElement>) {\n    let targetMove = WHITE\n    if (event.target.value === 'black') {\n      targetMove = BLACK\n    }\n    if (targetMove !== props.state.currTurn) {\n      props.changeState(props.state.flipTurn())\n    }\n  }\n  function onChangeEnPassantFile (event: ChangeEvent<HTMLSelectElement>) {\n    props.changeState(props.state.modify(newState => {\n      let enPassantRank = 5\n      if (newState.currTurn === BLACK) {\n        enPassantRank = 2\n      }\n      const enPassantPlayer = newState.getColor(newState.currTurn.OTHER_COLOR)\n      if (event.target.value) {\n        enPassantPlayer.enPassantPos = new Pos(Number(event.target.value), enPassantRank)\n      }\n    }))\n  }\n  function onPlay () {\n    changeMode(history, location, props.state, '/play.html', false)\n  }\n\n  newError(fenImportError, fenImportError)\n  newError(props.state.isCheckmate(), 'Setup state is mate')\n  newError(props.state.flipTurn().isCheck(), 'The king is captured')\n  const whiteKingCount = props.state.board.reduce((acc, piece) => acc + Number(piece === WHITE.KING), 0)\n  const blackKingCount = props.state.board.reduce((acc, piece) => acc + Number(piece === BLACK.KING), 0)\n  newError(whiteKingCount === 0, 'White needs a king')\n  newError(whiteKingCount > 1, 'White has more than one king')\n  newError(blackKingCount === 0, 'Black needs a king')\n  newError(blackKingCount > 1, 'Black has more than one king')\n  const backRankPawns = props.state.board.reduce((acc, piece, pos) => {\n    return acc + Number((pos.rank === 0 || pos.rank === 7) && (piece === WHITE.PAWN || piece === BLACK.PAWN))\n  }, 0)\n  newError(backRankPawns === 1, 'There is a pawn on the back rank')\n  newError(backRankPawns > 1, `There are ${backRankPawns} pawns on the back rank`)\n\n  function piecesToElement (piece: Piece, key: number): React.ReactElement {\n    function onClick () {\n      if (piece === props.selectedPiece) {\n        props.selectPiece()\n      } else {\n        props.selectPiece(piece)\n      }\n    }\n    const highlighted = piece === props.selectedPiece\n    return <BoardSquare key={key} piece={piece} highlighted={highlighted} onClick={onClick} theme={props.theme}/>\n  }\n\n  const blackPieces = [BLACK.PAWN, BLACK.KNIGHT, BLACK.BISHOP, BLACK.ROOK, BLACK.QUEEN, BLACK.KING].map(piecesToElement)\n  const whitePieces = [WHITE.PAWN, WHITE.KNIGHT, WHITE.BISHOP, WHITE.ROOK, WHITE.QUEEN, WHITE.KING].map(piecesToElement)\n\n  let selectedFirstMove = 'white'\n  if (props.state.currTurn === BLACK) {\n    selectedFirstMove = 'black'\n  }\n\n  let enPassantFile = ''\n  if (props.state.white.enPassantPos) {\n    enPassantFile = String(props.state.white.enPassantPos.file)\n  } else if (props.state.black.enPassantPos) {\n    enPassantFile = String(props.state.black.enPassantPos.file)\n  }\n\n  return (\n    <div className='SetupInfo'>\n      <div className='SetupErrorBox'>\n        {errors}\n      </div>\n      <div className='SetupPieceBox'>\n        {blackPieces}\n      </div>\n      <div className='SetupPieceBox'>\n        {whitePieces}\n      </div>\n      <LabelledTextBox value={props.state.toFen()} type='text' readOnly label='Current Fen:'/>\n      <LabelledTextBox label='Input Fen:' onChange={onInputFenChange} value={inputFen}/>\n      <div>\n        <label>First Move: </label>\n        <select value={selectedFirstMove} onChange={onChangeFirstMove}>\n          <option value='white'>White</option>\n          <option value='black'>Black</option>\n        </select>\n      </div>\n      <div>\n        <label>En-passant file: </label>\n        <select value={enPassantFile} onChange={onChangeEnPassantFile}>\n          <option value=''>-</option>\n          <option value='0'>a</option>\n          <option value='1'>b</option>\n          <option value='2'>c</option>\n          <option value='3'>d</option>\n          <option value='4'>e</option>\n          <option value='5'>f</option>\n          <option value='6'>g</option>\n          <option value='7'>h</option>\n        </select>\n      </div>\n      <div>\n        <label>White O-O: </label>\n        <input type='checkbox' checked={props.state.white.kingSideCastle} onChange={onToggleWhiteKingSideCastle}/>\n      </div>\n      <div>\n        <label>White O-O-O: </label>\n        <input type='checkbox' checked={props.state.white.queenSideCastle} onChange={onToggleWhiteQueenSideCastle}/>\n      </div>\n      <div>\n        <label>Black O-O: </label>\n        <input type='checkbox' checked={props.state.black.kingSideCastle} onChange={onToggleBlackKingSideCastle}/>\n      </div>\n      <div>\n        <label>Black O-O-O: </label>\n        <input type='checkbox' checked={props.state.black.queenSideCastle} onChange={onToggleBlackQueenSideCastle}/>\n      </div>\n      <div>\n        <button onClick={onImportFen}>Import Fen</button>\n        <button onClick={onReset}>Reset</button>\n        <button onClick={onClear}>Clear</button>\n      </div>\n      <button disabled={hasError} onClick={onPlay}>Play</button>\n      <button onClick={props.openTheme}>Change Theme</button>\n    </div>\n  )\n}\n","import { useState } from 'react'\nimport { State } from './logic/state'\nimport ChessBoard from './ChessBoard'\nimport SetupInfo from './SetupInfo'\nimport * as React from 'react'\nimport { Pos } from './logic/util'\nimport { EMPTY, Piece } from './logic/pieces'\nimport { changeMode, getStateFromQuery } from './util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { ModeProps } from './App'\n\nexport default function SetupMode (props: ModeProps) {\n  const history = useHistory()\n  const [highlightedPos, setHighlightedPos] = useState<Pos>()\n  const [selectedPiece, setSelectedPiece] = useState<Piece>()\n  const state = getStateFromQuery(history)\n  const location = useLocation()\n\n  function setState (newState: State) {\n    changeMode(history, location, newState, '/setup.html', true)\n  }\n\n  const makeMove = (state: State) => setState(state)\n  function changeHighlight (pos?: Pos) {\n    setHighlightedPos(pos)\n    setSelectedPiece(undefined)\n  }\n  function selectPiece (piece?: Piece) {\n    if (highlightedPos) {\n      setState(state.modify(newState => {\n        newState.board = newState.board.set(highlightedPos, EMPTY)\n      }))\n    } else {\n      setSelectedPiece(piece)\n    }\n    setHighlightedPos(undefined)\n  }\n\n  const setup = { setupPiece: selectedPiece }\n  return (\n    <div className='App'>\n      <div className=\"PlayChessBoardBox\">\n        <ChessBoard changeHighlight={changeHighlight} highlightedPos={highlightedPos} state={state} setup={setup} makeMove={makeMove} theme={props.theme}/>\n      </div>\n      <SetupInfo changeState={makeMove} selectPiece={selectPiece} selectedPiece={selectedPiece} state={state} theme={props.theme} openTheme={props.openTheme}/>\n    </div>\n  )\n}\n","import { State } from './logic/state'\nimport { convertFileLetter, convertRankLetter, Pos } from './logic/util'\nimport { Piece } from './logic/pieces'\n\nexport abstract class Player {\n    abstract makeMove(state: State): Promise<State>\n    abstract name(): string\n\n    getBoardClick (): undefined | ((state: State) => void) {\n      return undefined\n    }\n\n    close (): void {}\n    newGame (): void {}\n}\n\nexport class Human extends Player {\n    promiseRes?: (state: State) => void\n\n    makeMove (state: State): Promise<State> {\n      return new Promise<State>(resolve => {\n        this.promiseRes = resolve\n      })\n    }\n\n    name () {\n      return 'Human'\n    }\n\n    getBoardClick (): ((state: State) => void) | undefined {\n      return this.promiseRes\n    }\n}\n\nexport class MrRandom extends Player {\n  timeoutID?: number\n\n  makeMove (state: State): Promise<State> {\n    const moves = state.moves().filter(move => !move.invalid())\n    const move = moves[Math.floor(Math.random() * moves.length)]\n    return new Promise<State>(resolve => {\n      this.timeoutID = window.setTimeout(() => resolve(move.do()), 100)\n    })\n  }\n\n  name () {\n    return 'MrRandom'\n  }\n\n  close () {\n    clearTimeout(this.timeoutID)\n  }\n}\n\nexport class Stockfish extends Player {\n  stockfishHandle?: Worker\n  state?: State\n  resolve?: (state: State) => void\n  level: number\n\n  constructor (level: number) {\n    super()\n    this.level = level\n    this.parseStockfishLine = this.parseStockfishLine.bind(this)\n  }\n\n  name () {\n    return 'Stockfish'\n  }\n\n  makeMove (state: State): Promise<State> {\n    return new Promise(resolve => {\n      this.state = state\n      if (!this.stockfishHandle) {\n        const wasmSupported = typeof WebAssembly === 'object' && WebAssembly.validate(Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00))\n        this.stockfishHandle = new Worker(wasmSupported ? process.env.PUBLIC_URL + '/stockfish.js/stockfish.wasm.js' : process.env.PUBLIC_URL + '/stockfish.js/stockfish.js')\n        this.stockfishHandle.addEventListener('message', this.parseStockfishLine)\n        this.stockfishHandle.postMessage('uci')\n      } else {\n        this.giveStateToStockfish()\n      }\n      this.resolve = resolve\n    })\n  }\n\n  giveStateToStockfish () {\n    this.stockfishHandle!.postMessage(`position fen ${this.state?.toFen()}`)\n    this.stockfishHandle!.postMessage('go movetime 1000')\n  }\n\n  parseStockfishLine (event: MessageEvent<string>) {\n    const line = event.data\n    // console.log(line)\n    const command = line.split(/\\s+/).map(x => x.trim()).filter(x => x)\n    switch (command[0]) {\n      case 'uciok':\n        this.stockfishHandle!.postMessage(`setoption name Skill Level value ${this.level}`)\n        this.stockfishHandle!.postMessage('ucinewgame')\n        this.giveStateToStockfish()\n        break\n      case 'bestmove': {\n        const rawMove = command[1]\n        const fromPos = new Pos(convertFileLetter(rawMove[0]), convertRankLetter(rawMove[1]))\n        const toPos = new Pos(convertFileLetter(rawMove[2]), convertRankLetter(rawMove[3]))\n        let promoteChoice: Piece | undefined\n        if (rawMove[4]) {\n          promoteChoice = this.state!.currTurn.FROM_LETTER.get(rawMove[4].toUpperCase())\n        }\n        const moves = this.state!.moves().filter(x => {\n          if (x.isCastle() && fromPos.rank === this.state!.currTurn.KING_RANK && toPos.rank === fromPos.rank && fromPos.file === 4) {\n            if (x.isKingSide && toPos.file === 6) {\n              return true\n            } else if (!x.isKingSide && toPos.file === 2) {\n              return true\n            }\n          }\n          if (x.isNormal() && x.fromPos.compare(fromPos) === 0 && x.toPos.compare(toPos) === 0) {\n            if (x.isPromote()) {\n              return promoteChoice === x.promoteChoice\n            }\n            return true\n          }\n          return false\n        })\n        this.resolve!(moves[0].do())\n        break\n      }\n    }\n  }\n\n  close () {\n    if (this.stockfishHandle) {\n      this.stockfishHandle.terminate()\n    }\n  }\n}\n\nexport abstract class PlayerFactory {\n  abstract name (): string\n  abstract build (): Player\n  abstract id (): string\n  difficulty (): number | undefined {\n    return undefined\n  }\n\n  setDifficulty (x: number): PlayerFactory {\n    return this\n  }\n\n  minDifficulty (): number | undefined {\n    return undefined\n  }\n\n  maxDifficulty (): number | undefined {\n    return undefined\n  }\n}\n\nexport class HumanFactory extends PlayerFactory {\n  name (): string {\n    return 'Human'\n  }\n\n  build (): Player {\n    return new Human()\n  }\n\n  id (): string {\n    return 'human'\n  }\n}\n\nexport class RandomFactory extends PlayerFactory {\n  name (): string {\n    return 'Mr. Random'\n  }\n\n  build (): Player {\n    return new MrRandom()\n  }\n\n  id (): string {\n    return 'random'\n  }\n}\n\nexport class StockfishFactory extends PlayerFactory {\n  rawDifficulty: number\n\n  constructor (difficulty?: number) {\n    super()\n    this.rawDifficulty = difficulty || 0\n  }\n\n  difficulty (): number | undefined {\n    return this.rawDifficulty\n  }\n\n  minDifficulty (): number | undefined {\n    return 0\n  }\n\n  maxDifficulty (): number | undefined {\n    return 20\n  }\n\n  setDifficulty (x: number): PlayerFactory {\n    return new StockfishFactory(x)\n  }\n\n  name (): string {\n    return 'Stockfish'\n  }\n\n  build (): Player {\n    return new Stockfish(this.rawDifficulty)\n  }\n\n  id (): string {\n    return 'stockfish'\n  }\n}\n","import * as React from 'react'\nimport { HumanFactory, PlayerFactory, RandomFactory, StockfishFactory } from './player'\n\nexport interface PlayerSelectorProps {\n  value: PlayerFactory\n  onPlayerChange: (playerFactory: PlayerFactory) => void\n}\n\nexport default function PlayerSelector (props: PlayerSelectorProps) {\n  const onSelChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    let newSel\n    switch (event.target.value) {\n      case 'human':\n        newSel = new HumanFactory()\n        break\n      case 'random':\n        newSel = new RandomFactory()\n        break\n      case 'stockfish':\n        newSel = new StockfishFactory()\n        break\n      default:\n        return\n    }\n    props.onPlayerChange(newSel)\n  }\n\n  const onDiffChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newDiff = Number(event.target.value)\n    props.onPlayerChange(props.value.setDifficulty(newDiff))\n  }\n\n  let difficultySlider\n  if (props.value.difficulty() !== undefined) {\n    difficultySlider =\n      <>\n        <br/>\n        <label>{props.value.name()} Level: {props.value.difficulty()}</label>\n        <br/>\n        <input type='range' min={props.value.minDifficulty()} max={props.value.maxDifficulty()} onChange={onDiffChange} value={props.value.difficulty()}/>\n      </>\n  }\n\n  return (\n    <>\n      <select value={props.value.id()} onChange={onSelChange}>\n        <option value='human'>\n          Human\n        </option>\n        <option value='random'>\n          MrRandom\n        </option>\n        <option value='stockfish'>\n          Stockfish\n        </option>\n      </select>\n      {difficultySlider}\n    </>\n  )\n}\n","import { State } from './logic/state'\nimport { BLACK } from './logic/pieces'\nimport React from 'react'\n\nexport interface MoveHistoryProps {\n  state: State\n}\n\nfunction autoScroll (div: HTMLDivElement | null) {\n  if (div) {\n    div.scrollIntoView(false)\n  }\n}\n\nexport default function MoveHistory (props: MoveHistoryProps) {\n  const moves = []\n  if (props.state.begin().currTurn === BLACK) {\n    moves.push(<div key='Filler' className='ChessMove'/>)\n  }\n\n  for (let i = 0; i < props.state.moveHistory.size; i++) {\n    const move = props.state.moveHistory.get(i)!\n    const halfMove = move.state.halfMoveCount()\n    let ref\n    if (i === props.state.moveHistory.size - 1) {\n      ref = autoScroll\n    }\n    moves.push(<div key={halfMove} className='ChessMove' ref={ref}>{move.toString()}</div>)\n  }\n\n  return (\n    <div className='MoveHistory'>\n      {moves}\n    </div>\n  )\n}\n","import { State } from './logic/state'\nimport { HumanFactory, Player, PlayerFactory } from './player'\nimport * as React from 'react'\nimport { useState } from 'react'\nimport PlayerSelector from './PlayerSelector'\nimport MoveHistory from './MoveHistory'\n\ninterface GameInfoProps {\n  state: State\n  restart: (white: Player, black: Player) => void\n  switchMode: () => void\n  openTheme: () => void\n  flipBoard: () => void\n}\n\nexport default function GameInfo (props: GameInfoProps) {\n  const [whiteFactory, setWhiteFactory] = useState<PlayerFactory>(new HumanFactory())\n  const [blackFactory, setBlackFactory] = useState<PlayerFactory>(new HumanFactory())\n\n  const restartButton = () => {\n    props.restart(whiteFactory.build(), blackFactory.build())\n  }\n\n  const onWhiteChange = (player: PlayerFactory) => {\n    setWhiteFactory(player)\n  }\n\n  const onBlackChange = (player: PlayerFactory) => {\n    setBlackFactory(player)\n  }\n\n  let checkmateText\n  if (props.state.isCheckmate()) {\n    checkmateText = 'Checkmate'\n  } else if (props.state.isDraw()) {\n    checkmateText = `Draw due to ${props.state.drawReason()}`\n  }\n  return (\n    <div className='GameInfo'>\n      {checkmateText}\n      <br/>\n      <label>White Player </label>\n      <PlayerSelector onPlayerChange={onWhiteChange} value={whiteFactory}/>\n      <br/>\n      <label>Black Player </label>\n      <PlayerSelector onPlayerChange={onBlackChange} value={blackFactory}/>\n      <br/>\n      <button onClick={restartButton}>Restart</button>\n      <button onClick={props.switchMode}>Setup</button>\n      <br/>\n      <button onClick={props.flipBoard}>Flip Board</button>\n      <button onClick={props.openTheme}>Change Theme</button>\n      <br/>\n      <MoveHistory state={props.state}/>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { Human, Player } from './player'\nimport { State } from './logic/state'\nimport { BLACK } from './logic/pieces'\nimport ChessBoard from './ChessBoard'\nimport GameInfo from './GameInfo'\nimport { Pos } from './logic/util'\nimport { useHistory, useLocation } from 'react-router-dom'\nimport { changeMode, getStateFromQuery } from './util'\nimport { ModeProps } from './App'\n\ninterface Players {\n  white: Player\n  black: Player\n}\n\nexport default function PlayMode (props: ModeProps) {\n  const history = useHistory()\n  const location = useLocation()\n  const [players, setPlayers] = useState<Players>({ white: new Human(), black: new Human() })\n\n  const [state, setState] = useState(() => getStateFromQuery(history))\n  const [highlightedPos, setHighlightedPos] = useState<Pos>()\n  const [flipBoard, setFlipBoard] = useState(false)\n\n  useEffect(() => {\n    // If someone pushes the reset button at the exact time a move is ready,\n    // then the board will be corrupted with the move that have been be canceled.\n    // This variable blocks the board from updating in the promise handler,\n    // preventing this race condition.\n    const defaultState = getStateFromQuery(history)\n    let stateValid = true\n    let player1 = players.white\n    let player2 = players.black\n    if (defaultState.currTurn === BLACK) {\n      const tmp = player1\n      player1 = player2\n      player2 = tmp\n    }\n    const makeMoveThen = (state: State): Promise<unknown> | undefined => {\n      if (!stateValid) {\n        return\n      }\n      if (state.isGameOver()) {\n        setState(state)\n        return\n      }\n      const tmp = player1\n      player1 = player2\n      player2 = tmp\n      const ret = player1.makeMove(state).then(makeMoveThen)\n      setState(state)\n      return ret\n    }\n    player1.makeMove(defaultState).then(makeMoveThen)\n    setState(defaultState)\n    return () => {\n      stateValid = false\n      players.white.close()\n      players.black.close()\n    }\n  }, [players])\n\n  const restart = (white: Player, black: Player) => {\n    setPlayers({ white, black })\n  }\n\n  const switchMode = () => {\n    changeMode(history, location, state, '/setup.html', false)\n  }\n\n  function toggleBoardFlip () {\n    setFlipBoard(!flipBoard)\n  }\n\n  let currPlayer = players.white\n  if (state.currTurn === BLACK) {\n    currPlayer = players.black\n  }\n  return (\n    <div className=\"App\">\n      <div className=\"PlayChessBoardBox\">\n        <ChessBoard flipBoard={flipBoard} changeHighlight={setHighlightedPos} highlightedPos={highlightedPos} makeMove={currPlayer.getBoardClick()} state={state} theme={props.theme}/>\n      </div>\n      <GameInfo flipBoard={toggleBoardFlip} state={state} restart={restart} switchMode={switchMode} openTheme={props.openTheme}/>\n    </div>\n  )\n}\n","import { useEffect, useState } from 'react'\nimport DEFAULT_THEME from './defaultTheme.json'\nimport assert from 'assert'\n\nexport interface BoardSquareTheme {\n  name: string,\n  id: string,\n  // Must be an css color\n  blackColor: string,\n  whiteColor: string,\n}\n\nexport interface PieceTheme {\n  prefix: string,\n  name: string,\n}\n\nexport interface Theme {\n  piece: PieceTheme\n  boardSquare: BoardSquareTheme,\n}\n\nlet CLASSNAME_SUFFIX = 0\n\nexport class ThemeManager {\n  readonly theme: Readonly<Theme>\n  readonly className: string\n\n  readonly style = document.createElement('style')\n\n  constructor (theme?: Theme) {\n    if (!theme) {\n      theme = DEFAULT_THEME\n    }\n    this.theme = { ...theme }\n    this.className = `ChessTheme-${CLASSNAME_SUFFIX}`\n    CLASSNAME_SUFFIX++\n    assert(/^[0-9a-zA-Z#]+$/.test(this.theme.boardSquare.whiteColor), 'Attempted xss')\n    assert(/^[0-9a-zA-Z#]+$/.test(this.theme.boardSquare.blackColor), 'Attempted xss')\n    this.style.textContent = `\n      .ChessBoardSquareWhite.${this.className} {\n        background-color: ${this.theme.boardSquare.whiteColor};\n      }\n\n      .ChessBoardSquareBlack.${this.className} {\n       background-color: ${this.theme.boardSquare.blackColor};\n      }\n    `\n  }\n}\n\nexport function useTheme (defaultTheme?: Theme): [ThemeManager, (theme: Theme) => void] {\n  const [theme, setTheme] = useState(new ThemeManager(defaultTheme))\n  useEffect(() => {\n    document.head.append(theme.style)\n    return () => {\n      theme.style.remove()\n    }\n  }, [theme])\n\n  return [theme, theme => {\n    setTheme(new ThemeManager(theme))\n  }]\n}\n","import { Theme, ThemeManager, useTheme } from './theme'\nimport React, { ChangeEvent, useEffect, useState } from 'react'\nimport BOARD_THEMES from './boardThemes.json'\nimport PIECE_THEMES from './pieceThemes.json'\nimport ChessBoard from './ChessBoard'\nimport { getStartState } from './logic/state'\nimport useResizeEffect from './useResizeEffect'\n\nexport interface ThemeSetupProps {\n  theme: ThemeManager\n  setTheme: (theme: Theme) => void\n}\n\nexport default function ThemeSetup (props: ThemeSetupProps) {\n  const [theme, setTheme] = useTheme(props.theme.theme)\n  const [windowHeight, setWindowHeight] = useState(0)\n  const [windowWidth, setWindowWidth] = useState(0)\n\n  function resizeWindow () {\n    const height = document.body.offsetHeight\n    const width = document.body.offsetWidth\n    if (height !== windowHeight) {\n      setWindowHeight(height)\n    }\n\n    if (width !== windowWidth) {\n      setWindowWidth(width)\n    }\n  }\n\n  useEffect(resizeWindow)\n  useResizeEffect(resizeWindow)\n\n  const boardThemes = []\n  for (const theme of BOARD_THEMES) {\n    boardThemes.push(<option value={theme.id} key={theme.id}>{theme.name}</option>)\n  }\n\n  const pieceThemes = []\n  for (const theme of PIECE_THEMES) {\n    pieceThemes.push(<option value={theme.prefix} key={theme.prefix}>{theme.name}</option>)\n  }\n\n  function onChangeBoardTheme (event: ChangeEvent<HTMLSelectElement>) {\n    const boardTheme = BOARD_THEMES.find(theme => theme.id === event.target.value)!\n    const newTheme = { ...theme.theme }\n    newTheme.boardSquare = { ...boardTheme }\n    setTheme(newTheme)\n  }\n\n  function onChangePieceTheme (event: ChangeEvent<HTMLSelectElement>) {\n    const pieceTheme = PIECE_THEMES.find(theme => theme.prefix === event.target.value)!\n    const newTheme = { ...theme.theme }\n    newTheme.piece = { ...pieceTheme }\n    setTheme(newTheme)\n  }\n\n  function onConfirm () {\n    props.setTheme(theme.theme)\n  }\n\n  function onCancel () {\n    props.setTheme(props.theme.theme)\n  }\n\n  return (\n    <div className='Window' style={{ width: windowWidth, height: windowHeight }}>\n      <div className='WindowCover' onClick={onCancel}/>\n      <div className='WindowContents'>\n        <h1>Theme Setup</h1>\n        <label>Board Theme:</label>\n        <select onChange={onChangeBoardTheme} value={theme.theme.boardSquare.id}>\n          {boardThemes}\n        </select>\n        <label>Piece Theme:</label>\n        <select onChange={onChangePieceTheme} value={theme.theme.piece.prefix}>\n          {pieceThemes}\n        </select>\n        <div className=\"WindowChessBoard\">\n          <ChessBoard state={getStartState()} theme={theme}/>\n        </div>\n        <button onClick={onConfirm}>Confirm</button>\n        <button onClick={onCancel}>Cancel</button>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport './App.css'\nimport SetupMode from './SetupMode'\nimport PlayMode from './PlayMode'\nimport { BrowserRouter, Switch, Route, Redirect } from 'react-router-dom'\nimport { Theme, ThemeManager, useTheme } from './theme'\nimport { useState } from 'react'\nimport ThemeSetup from './ThemeSetup'\n\nexport interface ModeProps {\n  theme: ThemeManager\n  openTheme: () => void\n}\n\nfunction App (_props: {}) {\n  const [theme, setTheme] = useTheme()\n  const [themeOpen, setThemeOpen] = useState(false)\n\n  function onSetTheme (theme: Theme) {\n    setTheme(theme)\n    setThemeOpen(false)\n  }\n\n  function openTheme () {\n    setThemeOpen(true)\n  }\n\n  let themeSetup\n  if (themeOpen) {\n    themeSetup = <ThemeSetup theme={theme} setTheme={onSetTheme}/>\n  }\n\n  return (\n    <>\n      {themeSetup}\n      <BrowserRouter>\n        <Switch>\n          <Redirect exact from={process.env.PUBLIC_URL + '/'} to={process.env.PUBLIC_URL + '/play.html'}/>\n          <Route path={process.env.PUBLIC_URL + '/play.html'}>\n            <PlayMode theme={theme} openTheme={openTheme}/>\n          </Route>\n          <Route path={process.env.PUBLIC_URL + '/setup.html'}>\n            <SetupMode theme={theme} openTheme={openTheme}/>\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </>\n  )\n}\n\nexport default App\n","import { stateFromFen } from './logic/state';\n\n(window as any).YACHESS_DEBUG = {\n  perft: (fen: string, depth: number): string => {\n    let output = ''\n    if (!Number.isInteger(depth) || depth < 1) {\n      throw new Error('Invalid depth')\n    }\n\n    const state = stateFromFen(fen)\n    const moves = state.moves().filter(x => !x.invalid())\n    let nodeTotal = 0\n    for (const move of moves) {\n      const nodes = move.do().perft(depth - 1)\n      nodeTotal += nodes\n      output += `${move.toNotation().toString()} has ${nodes} nodes\\n`\n    }\n    output += `There are ${nodeTotal} nodes in total`\n\n    return output\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport './debug'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}